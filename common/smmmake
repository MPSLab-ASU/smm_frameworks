#! /usr/bin/env python

import getopt
import glob
import os
import subprocess
import sys




# Create the makefile for SPM management
def create_makefile_spm(arguments="", infile = "", outfile="", codesize = 0, numregions = 0, datasize = 0, stacksize = 0, globalsize = 0, memconfig = 0):
	#  make file
	#print stacksize
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm
OPTLVL = -O3

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) $(OPTLVL) -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o temp_$@.bc $(OBJECTS)
	opt $(OPTLVL) -disable-inlining < temp_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	objdump -d $@ > $@.dis
	-rm temp_$@.bc

basic_$(PROGRAM).bc: $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-prolog < $(PROGRAM).bc > basic_$(PROGRAM).bc
	llvm-dis < basic_$(PROGRAM).bc > basic_$(PROGRAM).ll
	-rm temp*_$(PROGRAM).bc

# For code management 

function_size.txt: $(PROGRAM)
	# Get user functions names
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -funcname < $(PROGRAM).bc > /dev/null 2> user_funcs.txt
	# Get the code size of user functions
	codeSize user_funcs.txt 2> function_size.txt
	-rm user_funcs.txt

map.txt: $(PROGRAM) function_size.txt
	# Get code overlay scheme
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -get-map -func-size function_size.txt ${code_size_constraint} ${num_region_constraint} -output-size code_output.txt < $(PROGRAM).bc > /dev/null 2> map.txt
	# Get the linker script based on overlay scheme
	smmmake --configure-spm-linkerscript map.txt

cm_cost.txt: $(PROGRAM) function_size.txt 
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -estimate-cost -func-size function_size.txt -output-cost cm_cost.txt < $(PROGRAM).bc > /dev/null

cm: basic_$(PROGRAM).bc dma.bc code_manager.bc map.txt 
	llvm-link -o temp_$(PROGRAM).bc dma.bc code_manager.bc basic_$(PROGRAM).bc
	# Insert code management functions
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCM.so -smmcm -map map.txt --debug-only=smmcm < temp_$(PROGRAM).bc > $@_$(PRO
	GRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

ecm: basic_$(PROGRAM).bc dma.bc code_manager.bc map.txt
	llvm-link -o temp_$(PROGRAM).bc dma.bc code_manager.bc basic_$(PROGRAM).bc
	# Insert code management functions based on code overlay scheme
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMECM.so -smmecm -map map.txt --debug-only=smmecm < temp_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis


# For stack management

stack_frame_size_with_lib_funcs: $(PROGRAM)
    	# The trace of function calls in Gem5 must have ben prepared

	# Print the size of the stack frame of user-defined functions into stack_frame_size.txt
	~/Applications/llvm-3.6.0/build/Debug+Asserts/bin/clang -o $(PROGRAM) $(PROGRAM).bc $(LDFLAGS) 2> stack_frame_size.txt

	# Print the names of the library functions into lib_funcs.txt
	#opt $(OPTLVL) -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSMH.so -libfunc < $(PROGRAM).bc > /dev/null 2> lib_funcs.txt
	# Get the stack frame size of the library functions listed in lib_funcs.txt and add them to stack_frame_size.txt
	#libFuncFrameSize lib_funcs.txt stack_frame_size.txt

	# Get the call paths and save the result in wcg_paths.txt, based on stack_frame_size.txt
	#opt $(OPTLVL) -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSMH.so -wcg < $(PROGRAM).bc > /dev/null 2> wcg_paths.txt 

	#-rm -rf sm
	#mkdir sm
	#mv stack_frame_size.txt sm
	#-rm lib_funcs.txt


stack_frame_size.txt: $(PROGRAM)
	# Print the size of the stack frame of user-defined functions into stack_frame_size.txt
	~/Applications/llvm-3.6.0/build/Debug+Asserts/bin/clang -o $(PROGRAM) $(PROGRAM).bc $(LDFLAGS) 2> stack_frame_size.txt

stack_size_range.txt: $(PROGRAM) stack_frame_size.txt
	opt $(OPTLVL) -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSMH.so -estimate-size -stack-frame-size stack_frame_size.txt < $(PROGRAM).bc > /dev/null 2> stack_size_range.txt 
	

sm_cost.txt: $(PROGRAM) stack_frame_size.txt 
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSMH.so --estimate-cost -stack-frame-size stack_frame_size.txt -output-cost sm_cost.txt < $(PROGRAM).bc > /dev/null

sm: basic_$(PROGRAM).bc dma.bc stack_manager.bc
	llvm-link -o temp_$(PROGRAM).bc dma.bc stack_manager.bc basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSM.so -smmsm --debug-only=smmssm < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-epilog -code 1 -global 0 --debug-only=smm < temp1_$(PROGRAM).bc > $@_$(PROGRAM).bc
	#llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	-rm temp*_$(PROGRAM).bc


ssm: basic_$(PROGRAM).bc dma.bc stack_manager.bc stack_frame_size.txt
	llvm-link -o temp_$(PROGRAM).bc dma.bc stack_manager.bc basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmssm ${stack_size_constraint} -stack-frame-size stack_frame_size.txt < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-epilog -code 1 -global 0 --debug-only=smm < temp1_$(PROGRAM).bc > $@_$(PROGRAM).bc
	#llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	-rm temp*_$(PROGRAM).bc


esm: basic_$(PROGRAM).bc dma.bc stack_manager.bc stack_frame_size.txt
	llvm-link -o temp_$(PROGRAM).bc dma.bc stack_manager.bc basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMESM.so -smmesm ${stack_size_constraint} -stack-frame-size stack_frame_size.txt --debug-only=smmesm < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-epilog -code 1 -global 0 --debug-only=smm < temp1_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	-rm temp*_$(PROGRAM).bc


# For global management
gm_cost.txt: $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMGMH.so --estimate-cost -output-cost gm_cost.txt < $(PROGRAM).bc > /dev/null

global_variable_size.txt: $(PROGRAM)
	# Get the size of global variables
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMGMH.so -size < $(PROGRAM).bc > /dev/null 2> global_variable_size.txt

egm: basic_$(PROGRAM).bc dma.bc spm_heap_allocator.bc
	llvm-link -o temp_$(PROGRAM).bc dma.bc basic_$(PROGRAM).bc spm_heap_allocator.bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMEGM.so -smmegm ${tile_size} ${global_size_constraint} -debug-only=smmegm < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-epilog -code 1 -global 1 --debug-only=smm < temp1_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	-rm temp*_$(PROGRAM).bc


# For integrated management

mem_config.txt: $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMIMH.so -estimate-accesses ${data_size_constraint} -output mem_config.txt --debug-only=smmim < $(PROGRAM).bc > /dev/null

eim-spm: basic_$(PROGRAM).bc dma.bc stack_manager.bc  code_manager.bc map.txt spm_heap_allocator.bc
	llvm-link -o temp_$(PROGRAM).bc dma.bc stack_manager.bc code_manager.bc basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMESM.so -smmesm ${stack_size_constraint} -stack-frame-size stack_frame_size.txt < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	llvm-link -o temp2_$(PROGRAM).bc temp1_$(PROGRAM).bc spm_heap_allocator.bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMEGM.so -smmegm ${global_size_constraint} < temp2_$(PROGRAM).bc > temp3_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMECM.so -smmecm -map map.txt < temp3_$(PROGRAM).bc > temp4_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -user-code -user-global < temp4_$(PROGRAM).bc > eim_$(PROGRAM).bc
	llvm-dis < eim_$(PROGRAM).bc > eim_$(PROGRAM).ll
	llc -O3 -o eim_$(PROGRAM).s eim_$(PROGRAM).bc 
	$(CC) -o eim_$(PROGRAM) eim_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d eim_$(PROGRAM) > eim_$(PROGRAM).dis
	rm temp*_$(PROGRAM).bc

eim-cache: basic_$(PROGRAM).bc dma.bc stack_manager.bc  code_manager.bc map.txt
	llvm-link -o temp_$(PROGRAM).bc dma.bc stack_manager.bc code_manager.bc basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMECM.so -smmecm -map map.txt < temp_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -user-code --debug-only=smmim < temp1_$(PROGRAM).bc > eim_$(PROGRAM).bc
	llvm-dis < eim_$(PROGRAM).bc > eim_$(PROGRAM).ll
	llc -O3 -o eim_$(PROGRAM).s eim_$(PROGRAM).bc 
	$(CC) -o eim_$(PROGRAM) eim_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d eim_$(PROGRAM) > eim_$(PROGRAM).dis
	rm temp*_$(PROGRAM).bc

eim:
	${mem_config}

# Common
dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include -include dma.h $(CFLAGS) -emit-llvm -c $< -o $@

stack_manager.bc:$(SMMDIR)/stack/lib/stack_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/stack/include -include stack_manager.h $(CFLAGS) -emit-llvm -c $< -o $@

code_manager.bc:$(SMMDIR)/code/lib/code_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/code/include -include code_manager.h $(CFLAGS) -emit-llvm -c $< -o $@

spm_heap_allocator.bc:$(SMMDIR)/heap/lib/spm_heap_allocator.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/heap/include -include spm_heap_allocator.h $(CFLAGS) -emit-llvm -c $< -o $@

mem_heap_allocator.bc:$(SMMDIR)/heap/lib/mem_heap_allocator.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/heap/include -include mem_heap_allocator.h $(CFLAGS) -emit-llvm -c $< -o $@

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@


cfg: $(PROGRAM)
	opt -dot-cfg-only < $(PROGRAM).bc

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} sm_$(PROGRAM) ssm_$(PROGRAM) esm_$(PROGRAM) cm_$(PROGRAM) ecm_$(PROGRAM) edm_$(PROGRAM) im_$(PROGRAM) eim_$(PROGRAM) map.txt code_output.txt 
    """

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			if (outfile == ""):
				makefile = makefile.replace("${outfile}", "")
			else:
				makefile = makefile.replace("${outfile}", outfile + " sm_" + outfile + " ssm_" + outfile + " esm_" + outfile + " cm_" + outfile + "ecm_" + outfile + " edm_" + outfile + " im_" + outfile + " eim_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			if (stacksize != 0):
				makefile = makefile.replace("${stack_size_constraint}", "-size-constraint " + str(stacksize))
			else:
				makefile = makefile.replace("${stack_size_constraint}", "-size-constraint 0")
			if (codesize != 0):
				makefile = makefile.replace("${code_size_constraint}", "-size-constraint " + str(codesize))
			else:
				makefile = makefile.replace("${code_size_constraint}", "")
			if (numregions != 0):
				makefile = makefile.replace("${num_region_constraint}", "-num-region-constraint " + str(numregions))
			else:
				makefile = makefile.replace("${num_region_constraint}", "")
			if globalsize != 0:
				makefile = makefile.replace("${global_size_constraint}", "-size-constraint " + str(globalsize))
			else:
				makefile = makefile.replace("${global_size_constraint}", "-size-constraint 0")
			if datasize != 0:
				makefile = makefile.replace("${data_size_constraint}", "-size-constraint " + str(datasize))
			else:
				makefile = makefile.replace("${data_size_constraint}", "")
			if memconfig == 0:
				makefile = makefile.replace("${mem_config}", "make eim-spm")
			else:
				makefile = makefile.replace("${mem_config}", "make eim-cache")
			f.write(makefile)


# Create a makefile for SMM applicatoin management
def create_linkerscript_spm(map_file = ""):
	# Create the overlay of sections in the linker script from map file
	custom_script = []

	#custom_script.append("\n  . = ALIGN(0x10);\n")
	#custom_script.append("\n  . = __executable_start + 0x100000;\n")
	#custom_script.append("\n  . = ALIGN(0x100000);\n")
	custom_script.append("\n  . = ALIGN(0x400);\n")
	custom_script.append("  _spm_begin = .;\n")

	custom_script.append("\n  _spm_code_begin = .;\n")
	custom_script.append("  _spm_code_end = _spm_code_begin + 0x100000;\n");

	#print(map_file)
	if map_file != "":
		overlays = dict()
		with open(map_file) as f:
			numSec = int(f.readline())
			for i in range(numSec):
				overlays[i] = {"functions": []}

			for line in f:
				line = line.strip()
    				if line == "":
					continue;
 				tokens = line.split(" ")
   				func = tokens[0]
   				sec = int(tokens[1])
				#print func, " ", sec
   				overlays[sec]['functions'].append(func)

		last_func = ""

		for i in range(len(overlays)):
			overlay = overlays[i]
			if i == 0:
				custom_script.append("  OVERLAY ALIGN(0x10) : AT (_spm_code_end) {\n")
			else:
				custom_script.append("  OVERLAY ALIGN(0x10) : {\n")
			for func in overlay["functions"]:
				last_func = func
				custom_script.append("  .%s { *.(%s) }\n" % (func, func))
			custom_script.append("  }\n")
		custom_script.append("  . = LOADADDR(.%s) + SIZEOF(.%s);\n" % (last_func, last_func));
		custom_script.append("  _realign_addr = ALIGN(0x10);\n");
		custom_script.append("  .realign _realign_addr : AT (_realign_addr) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n");
		#custom_script.append("  ASSERT( (_reaglin_addr <= _spm_code_end), \"Error: Not enough room for code in the SPM\");\n");

	custom_script.append("  . = _spm_code_end + 0x100000;\n");

	custom_script.append("\n  _spm_reserved_begin = .;\n")
	custom_script.append("  _spm_reserved_end = _spm_reserved_begin + 0x100000;\n");
	custom_script.append("  .management_text : { *.(management_text) }\n")
#	custom_script.append("  .management_variables : { *.(management_variables) }\n")
	custom_script.append("  . = _spm_reserved_end;\n");


	custom_script.append("\n  _spm_stack_begin = .;\n");
	custom_script.append("  _spm_stack_end = _spm_stack_begin + 0x100000;\n");
	custom_script.append("  . = _spm_stack_end;\n");


	custom_script.append("\n  _spm_heap_begin = .;\n");
	custom_script.append("  _spm_heap_end = _spm_heap_begin + 0x100000;\n");
	custom_script.append("  . = _spm_heap_end;\n");

	custom_script.append("\n  _spm_array_begin = .;\n");
	custom_script.append("  _spm_array_end = _spm_array_begin + 0x100000;\n");
	custom_script.append("  . = _spm_array_end;\n");

	custom_script.append("\n  _spm_global_begin = .;\n");
	custom_script.append("  _spm_global_end = _spm_global_begin + 0x100000;\n");
	custom_script.append("  . = _spm_global_end;\n");

	custom_script.append("\n  _spm_end = .;\n")

	custom_script.append("\n  _cacheable_begin = .;\n")

	custom_script.append("\n  _cacheable_code_begin = .;\n")
	custom_script.append("  _cacheable_code_end = _cacheable_code_begin + 0x100000;\n");
	custom_script.append("  .user_text : { *.(user_text) }\n")
	custom_script.append("  . = _cacheable_code_end;\n");

	custom_script.append("\n  _cacheable_stack_begin = .;\n")
	custom_script.append("  _cacheable_stack_end = _cacheable_stack_begin + 0x100000;\n")
	custom_script.append("  . = _cacheable_stack_end;\n\n");

	custom_script.append("\n  _cacheable_heap_begin = .;\n")
	custom_script.append("  _cacheable_heap_end = _cacheable_heap_begin + 0x100000;\n");
	custom_script.append("  . = _cacheable_heap_end;\n");


	custom_script.append("\n  _cacheable_data_begin = .;\n")
	custom_script.append("  _cacheable_data_end = _cacheable_data_begin + 0x100000;\n");
	custom_script.append("  .user_data : { *.(user_data) }\n")
	custom_script.append("  . = _cacheable_data_end;\n");



	custom_script.append("\n  _cacheable_end = .;\n")

	custom_script.append("\n  .smm-guard _cacheable_end : AT (_cacheable_end) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n\n");

	custom_script.append("\n")



	#print custom_script

	# Create the linker script with SPM
#	if (not os.path.isfile("spm.ld")): 
	with open('spm.ld', 'w') as linker_script:
		implicit_linker_script = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
		i = 0
		while i <  range(len(implicit_linker_script)):
	    		line = implicit_linker_script[i]
    			while (line.find("==================================================") == -1):
				i = i+1
				line = implicit_linker_script[i]
			i = i + 1
    			line = implicit_linker_script[i]
			while (line.find("==================================================") == -1):
				if line.find("executable_start") != -1:
#					linker_script.write(line.replace("0x400000", "0x000000") + "\n  .spm_begin : { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n  . = ALIGN(0x10);\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					#linker_script.write(line + "\n  . = ALIGN(0x10);\n  _spm_code_begin = .;\n  . = . + 0x100000;\n  _spm_code_end = .;\n")
					linker_script.write(line)
					linker_script.writelines(custom_script)
				else:
    					linker_script.write(line + "\n")
				i = i+1
				line = implicit_linker_script[i]
			break;

def create_runme_spm(arguments="", infile = "", outfile="", l1d_size = 0, l1i_size = 0):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""

			cache_params = ""
			if l1d_size  or l1i_size:
				cache_params = " --caches"
				if l1d_size:
					cache_params = cache_params + " --l1d_size " + str(l1d_size)
				if l1i_size:
					cache_params = cache_params + " --l1i_size " + str(l1i_size)

			f.write(prolog + "\n")
			f.write(text + cache_params + "\n")
    		subprocess.Popen("chmod +x runme", stdout=subprocess.PIPE, shell=True)



# Create the runme file for SPM architecture
def create_runme_smmint(arguments="", infile = "", outfile="", l1d_size = 0, l1i_size = 0):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme_im")):
		with open("runme_im", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			im_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmim $SIMDIR/configs/example/se.py --cpu-type=atomic -c im_" + program
			eim_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmeim $SIMDIR/configs/example/se.py --cpu-type=atomic -c eim_" + program
			if (arguments != ""):
				im_text = im_text + " -o \"" + arguments.replace("output", "im_output", 1) + "\""
				eim_text = eim_text + " -o \"" + arguments.replace("output", "eim_output", 1) + "\""
			if (infile!= ""):
				im_text = im_text + " --input=\"" + infile + "\""
				eim_text = eim_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				im_text = im_text + " --output=\"im_" + outfile + "\""
				eim_text = eim_text + " --output=\"eim_" + outfile + "\""
			cache_params = ""
			if l1d_size  or l1i_size:
				cache_params = " --caches"
				if l1d_size:
					cache_params = cache_params + " --l1d_size " + str(l1d_size)
				if l1i_size:
					cache_params = cache_params + " --l1i_size " + str(l1i_size)
			f.write(prolog + "\n")
			#f.write(im_text + cache_params + "\n")
			f.write(eim_text + cache_params + "\n")
    		subprocess.Popen("chmod +x runme_im", stdout=subprocess.PIPE, shell=True)

	if (not os.path.isfile("runme_sm_prof")):
		with open("runme_sm_prof", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -e --stderr-file=simerr -d m5out/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod +x runme_sm_prof", stdout=subprocess.PIPE, shell=True)

# Create the runme file for stack management
def create_runme_smmstack(arguments="", infile = "", outfile="", l1d_size = 0, l1i_size = 0):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme_sm")):
		with open("runme_sm", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			sm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmsm $SIMDIR/configs/example/se.py --cpu-type=atomic -c sm_" + program
			ssm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmssm $SIMDIR/configs/example/se.py --cpu-type=atomic -c ssm_" + program
			esm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmesm $SIMDIR/configs/example/se.py --cpu-type=atomic -c esm_" + program
			if (arguments != ""):
				sm_text = sm_text + " -o \"" + arguments.replace("output", "sm_output", 1) + "\""
				ssm_text = ssm_text + " -o \"" + arguments.replace("output", "ssm_output", 1) + "\""
				esm_text = esm_text + " -o \"" + arguments.replace("output", "esm_output", 1) + "\""
			if (infile!= ""):
				sm_text = sm_text + " --input=\"" + infile + "\""
				ssm_text = ssm_text + " --input=\"" + infile + "\""
				esm_text = esm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				sm_text = sm_text + " --output=\"sm_" + outfile + "\""
				ssm_text = ssm_text + " --output=\"ssm_" + outfile + "\""
				esm_text = esm_text + " --output=\"esm_" + outfile + "\""

			cache_params = ""
			if l1d_size  or l1i_size:
				cache_params = " --caches"
				if l1d_size:
					cache_params = cache_params + " --l1d_size " + str(l1d_size)
				if l1i_size:
					cache_params = cache_params + " --l1i_size " + str(l1i_size)

			f.write(prolog + "\n")
			f.write(sm_text + cache_params + "\n")
			f.write(ssm_text + cache_params + "\n")
			f.write(esm_text + cache_params + "\n")
    		subprocess.Popen("chmod +x runme_sm", stdout=subprocess.PIPE, shell=True)

	if (not os.path.isfile("runme_sm_prof")):
		with open("runme_sm_prof", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -e --stderr-file=simerr -d m5out/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod +x runme_sm_prof", stdout=subprocess.PIPE, shell=True)

# Create the runme file for code management
def create_runme_smmcode(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme_cm")):
		with open("runme_cm", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			cm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmcm $SIMDIR/configs/example/se.py --cpu-type=atomic -c cm_" + program
			ecm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmecm $SIMDIR/configs/example/se.py --cpu-type=atomic -c ecm_" + program
			if (arguments != ""):
				cm_text = cm_text + " -o \"" + arguments.replace("output", "cm_output", 1) + "\""
				ecm_text = ecm_text + " -o \"" + arguments.replace("output", "ecm_output", 1) + "\""
			if (infile!= ""):
				cm_text = cm_text + " --input=\"" + infile + "\""
				ecm_text = ecm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				cm_text = cm_text + " --output=\"cm_" + outfile + "\""
				ecm_text = ecm_text + " --output=\"ecm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(cm_text + "\n")
			f.write(ecm_text + "\n")
    		subprocess.Popen("chmod +x runme_cm", stdout=subprocess.PIPE, shell=True)


def create_runme_smmglobal(arguments="", infile = "", outfile="", l1d_size = 0, l1i_size = 0):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme_gm")):
		with open("runme_gm", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			egm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmegm $SIMDIR/configs/example/se.py --cpu-type=atomic -c egm_" + program
			if (arguments != ""):
				egm_text = egm_text + " -o \"" + arguments.replace("output", "egm_output", 1) + "\""
			if (infile!= ""):
				egm_text = egm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				egm_text = egm_text + " --output=\"egm_" + outfile + "\""
			cache_params = ""
			if l1d_size  or l1i_size:
				cache_params = " --caches"
				if l1d_size:
					cache_params = cache_params + " --l1d_size " + str(l1d_size)
				if l1i_size:
					cache_params = cache_params + " --l1i_size " + str(l1i_size)
			f.write(prolog + "\n")
			f.write(egm_text + cache_params + "\n")
    		subprocess.Popen("chmod +x runme_gm", stdout=subprocess.PIPE, shell=True)

# Create a makefile for a cache-based architecture
def create_makefile_cache(outfile=""):
	#  Makefile
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm
OPTLVL = -O3

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) $(OPTLVL) -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS) mem_heap_allocator.bc
	llvm-link -o temp_$@.bc $(OBJECTS) mem_heap_allocator.bc
	opt $(OPTLVL) -disable-inlining < temp_$@.bc > temp1_$@.bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-prolog < temp1_$@.bc > temp2_$@.bc
	#opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -smm-cache --debug-only=smm-cache < temp2_$@.bc > $@.bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCommon.so -user-code -user-stack -user-global -user-heap --debug-only=smmim < temp2_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc $(OPTLVL) -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS) -Wl,-T,cache.ld
	objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

mem_heap_allocator.bc:$(SMMDIR)/heap/lib/mem_heap_allocator.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/heap/include -include mem_heap_allocator.h $(CFLAGS) -emit-llvm -c $< -o $@

callgraph: $(PROGRAM)
	opt -dot-callgraph < $(PROGRAM).bc
	dot -Tpng callgraph.dot -o $(PROGRAM).png

clean:
	-rm -rf  $(PROGRAM) *.s *.o *.bc *.ll *.dis  ${outfile} *.png
    """
	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + " " + objects[i] + ".bc"
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			makefile = makefile.replace("${outfile}", outfile)
			f.write(makefile)

# Create a makefile for cache-based setup
def create_linkerscript_cache():
	# Create the section for user functions
	custom_script = []
	#custom_script.append("\n\n  . = ALIGN(0x10);\n")
	#custom_script.append("\n  . = ALIGN(0x100000);\n")
	custom_script.append("\n  . = ALIGN(0x400);\n")
	#custom_script.append("\n  . = __executable_start + 0x100000;\n")
	custom_script.append("\n  . = 0xa00400;\n")
	custom_script.append("\n  _cacheable_begin = .;\n")

	custom_script.append("\n  _cacheable_code_begin = .;\n")
	custom_script.append("  _cacheable_code_end = _cacheable_code_begin + 0x100000;\n")
	custom_script.append("  .user_text : { *.(user_text) }\n")
	custom_script.append("  . = _cacheable_code_end;\n");


	custom_script.append("\n  _cacheable_stack_begin = .;\n")
	custom_script.append("  _cacheable_stack_end = _cacheable_stack_begin + 0x100000;\n")
	custom_script.append("  . = _cacheable_stack_end;\n");

	custom_script.append("\n  _cacheable_heap_begin = .;\n")
	custom_script.append("  _cacheable_heap_end = _cacheable_heap_begin + 0x100000;\n")
	custom_script.append("  . = _cacheable_heap_end;\n");

	custom_script.append("\n  _cacheable_data_begin = .;\n")
	custom_script.append("  _cacheable_data_end = _cacheable_data_begin + 0x100000;\n");
	custom_script.append("  .user_data : { *.(user_data) }\n")
	custom_script.append("  . = _cacheable_data_end;\n");


	custom_script.append("\n  _cacheable_end = .;\n")
	custom_script.append("\n  .smm-guard _cacheable_end : AT (_cacheable_end) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n\n");


	#print custom_script

	# Create the linker script with SPM
#	if (not os.path.isfile("spm.ld")): 
	with open('cache.ld', 'w') as linker_script:
		implicit_linker_script = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
		i = 0
		while i <  range(len(implicit_linker_script)):
	    		line = implicit_linker_script[i]
    			while (line.find("==================================================") == -1):
				i = i+1
				line = implicit_linker_script[i]
			i = i + 1
    			line = implicit_linker_script[i]
			while (line.find("==================================================") == -1):
				if line.find("executable_start") != -1:
					linker_script.write(line)
					linker_script.writelines(custom_script)
				else:
    					linker_script.write(line + "\n")
				i = i+1
				line = implicit_linker_script[i]
			break

def create_runme_cache(dsize = "", isize = "", arguments="", infile="", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme script
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5-cache"
			text = "$SIMDIR/build/X86/gem5.opt -r -d m5out/cache $SIMDIR/configs/example/se.py  --cpu-type=atomic --caches -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile != ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			if (dsize != ""):
				text = text + " --l1d_size=\"" + dsize +"\""
			if (isize != ""):
				text = text + " --l1i_size=\"" + isize +"\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod +x runme", stdout=subprocess.PIPE, shell=True)

		

# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["help", "configure-cache", "configure-stack", "configure-data", "configure-code", "configure-spm", "configure-spm-linkerscript=", "code-size=", "num-regions=", "data-size=", "mem-config=", "stack-size=", "global-size=",  "args=", "input=", "output=", "clean", "l1d_size=", "l1i_size="]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	arguments = ""
	infile = ""
	outfile = ""
	config = ""
	codesize = 0
	numregions = 0
	datasize = 0
	memconfig = 0
	stacksize = 0
	globalsize = 0
	map = ""
	dsize = ""
	isize = ""
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print 'smmmake --configure-cache --configure-spm'
			sys.exit()
		elif opt in ("--configure-cache"):
			config = "cache"
		elif opt in ("--configure-spm"):
			config = "spm"
		elif opt in ("--configure-code"):
			config = "code"
		elif opt in ("--configure-stack"):
			config = "stack"
		elif opt in ("--configure-global"):
			config = "global"
		elif opt in ("--configure-spm-linkerscript"):
			config = "linkerscript"
			map = arg
		elif opt in ("--args"):
			arguments = arg
		elif opt in ("--input"):
			infile = arg
		elif opt in ("--output"):
			outfile = arg
		elif opt in("--code-size"):
			codesize = arg
		elif opt in("--num-regions"):
			numregions = arg
		elif opt in("--data-size"):
			datasize = arg
		elif opt in("--mem-config"):
			memconfig = arg
		elif opt in("--stack-size"):
			stacksize = arg
		elif opt in("--global-size"):
			globalsize = arg
		elif opt in ("--clean"):
			if (os.path.isfile("spm.ld")):
    				subprocess.Popen("rm spm.ld", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("cache.ld")):
    				subprocess.Popen("rm cache.ld", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("Makefile")):
    				subprocess.Popen("rm Makefile", stdout=subprocess.PIPE, shell=True)
			if  len(glob.glob("*runme*")) > 0:
    				subprocess.Popen("rm *runme*", stdout=subprocess.PIPE, shell=True)
#			if (os.path.isdir("m5out")):
#    				subprocess.Popen("rm -r m5out", stdout=subprocess.PIPE, shell=True)
		elif opt in ("--l1d_size"):
		      	dsize = arg
		elif opt in ("--l1i_size"):
		      	isize = arg
		else:
			assert False, "unhandled option"

	if config == "cache":
		create_makefile_cache(outfile)
		create_linkerscript_cache()
		create_runme_cache(dsize, isize, arguments, infile, outfile)
    	if config == "spm":
		create_makefile_spm(arguments, infile, outfile, codesize, numregions, datasize, stacksize, globalsize, memconfig)
    		create_linkerscript_spm()
		create_runme_spm(arguments, infile, outfile, dsize, isize)
		create_runme_smmint(arguments, infile, outfile, dsize, isize)
		create_runme_smmcode(arguments, infile, outfile)
		create_runme_smmstack(arguments, infile, outfile, dsize, isize)
		create_runme_smmglobal(arguments, infile, outfile, dsize, isize)
    	if config == "code":
		create_makefile_spm(arguments, infile, outfile, codesize, numregions, 0, 0, 0)
		create_runme_spm(arguments, infile, outfile, dsize, isize)
		create_runme_smmcode(arguments, infile, outfile)
	if config == "stack":
		create_makefile_spm(arguments, infile, outfile, 0, 0, 0, stacksize, 0)
    		create_linkerscript_spm()
		create_runme_smmstack(arguments, infile, outfile)
	if config == "global":
		create_makefile_spm(arguments, infile, outfile, 0, 0, 0, 0, globalsize)
    		create_linkerscript_spm()
		create_runme_spm(arguments, infile, outfile, dsize, isize)
		create_runme_smmglobal(arguments, infile, outfile)
    	if config == "linkerscript":
		create_linkerscript_spm(map)

