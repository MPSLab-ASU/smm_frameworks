#! /usr/bin/env python

import getopt
import os
import subprocess
import sys




# Create a makefile for SMM stack management
def create_makefile_smmstack(arguments="", infile = "", outfile="", stacksize = 256):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm
OPTLVL = -O3

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c $(OPTLVL) -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o temp_$@.bc $(OBJECTS)
	opt $(OPTLVL) -disable-inlining < temp_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc $(OPTLVL) -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	#objdump -d $@ > $@.dis
	rm temp_$@.bc


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

basic_$(PROGRAM).bc: dma.bc stack_manager.bc $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMH.so -smmbasic < $(PROGRAM).bc > temp_$(PROGRAM).bc
	llvm-link -o basic_$(PROGRAM).bc dma.bc stack_manager.bc temp_$(PROGRAM).bc
	llvm-dis < basic_$(PROGRAM).bc > basic_$(PROGRAM).ll

sm: basic_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSM.so -smmsm --debug-only=smmssm < basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	#llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

ssm-wcg_cuts.txt:
	ssdm-cuts ssm-wcg/wcg_paths.txt ${stack_size} > ssm-wcg_cuts.txt



ssm: basic_$(PROGRAM).bc ssm-wcg_cuts.txt
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmssm -call-stack-partition ssm-wcg_cuts.txt --debug-only=smmssm < basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	#llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

esm-wcg_cuts.txt:
	ssdm-cuts esm-wcg/wcg_paths.txt ${stack_size} > esm-wcg_cuts.txt

esm: basic_$(PROGRAM).bc esm-wcg_cuts.txt
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMESM.so -smmesm -call-stack-partition esm-wcg_cuts.txt --debug-only=smmesm < basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	#llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc $(OPTLVL) -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include $(CFLAGS) $< -o $@

stack_manager.bc:$(SMMDIR)/stack/lib/stack_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/stack/include $(CFLAGS) $< -o $@

ssm-profile: $(PROGRAM)
	# Print the stack frame sizes of user-defined functions into wcg_nodes.txt 
	~/Applications/llvm-3.6.0/build/Debug+Asserts/bin/clang -o $(PROGRAM) $(PROGRAM).bc $(LDFLAGS) 2> wcg_nodes.txt

	# Get the call paths and save the result in wcg_paths.txt, based on wcg_nodes.txt
	opt $(OPTLVL) -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-wcg < $(PROGRAM).bc > /dev/null 2> wcg_paths.txt 


	# Estimate the stack space  (optional)
	opt $(OPTLVL) -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-sse < $(PROGRAM).bc > /dev/null 2> wcg_ssize.txt

	rm -rf ssm-wcg
	mkdir ssm-wcg
	mv wcg_nodes.txt wcg_paths.txt wcg_ssize.txt ssm-wcg

esm-profile: $(PROGRAM)
    	# The trace of function calls in Gem5 must have ben prepared

	# Print the stack frame sizes of user-defined functions into wcg_nodes.txt 
	~/Applications/llvm-3.6.0/build/Debug+Asserts/bin/clang -o $(PROGRAM) $(PROGRAM).bc $(LDFLAGS) 2> wcg_nodes.txt

	# Print the names of the library functions into lib_funcs.txt
	opt $(OPTLVL) -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-libfunc < $(PROGRAM).bc > /dev/null 2> lib_funcs.txt
	# Get the stack frame sizes of the library functions listed in lib_funcs.txt and add them to wcg_nodes.txt
	libFuncFrameSize lib_funcs.txt wcg_nodes.txt

	# Get the call paths and save the result in wcg_paths.txt, based on wcg_nodes.txt
	opt $(OPTLVL) -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-wcg < $(PROGRAM).bc > /dev/null 2> wcg_paths.txt 

	rm -rf esm-wcg
	mkdir esm-wcg
	mv wcg_nodes.txt wcg_paths.txt esm-wcg
	rm lib_funcs.txt


callgraph:
	opt -dot-callgraph < $(PROGRAM).bc
	dot -Tpng callgraph.dot -o $(PROGRAM).png
	opt -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} sm_$(PROGRAM) ssm_$(PROGRAM) esm_$(PROGRAM) ssm-prof_$(PROGRAM) esm-prof_$(PROGRAM) *-wcg_cuts.txt
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
#					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					  	outFile.write(line + "\n  _spm_stack_begin = .;\n  . = . + 0x100000;\n  _spm_stack_end = .;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			makefile = makefile.replace("${outfile}", outfile + " sm_" + outfile + " ssm_" + outfile + " esm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			makefile = makefile.replace("${stack_size}", str(stacksize))
			f.write(makefile)

def create_runme_smmstack(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			sm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmsm $SIMDIR/configs/example/se.py --cpu-type=atomic -c sm_" + program
			ssm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmssm $SIMDIR/configs/example/se.py --cpu-type=atomic -c ssm_" + program
			esm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmesm $SIMDIR/configs/example/se.py --cpu-type=atomic -c esm_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				sm_text = sm_text + " -o \"" + arguments.replace("output", "sm_output", 1) + "\""
				ssm_text = ssm_text + " -o \"" + arguments.replace("output", "ssm_output", 1) + "\""
				esm_text = esm_text + " -o \"" + arguments.replace("output", "esm_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				sm_text = sm_text + " --input=\"" + infile + "\""
				ssm_text = ssm_text + " --input=\"" + infile + "\""
				esm_text = esm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				sm_text = sm_text + " --output=\"sm_" + outfile + "\""
				ssm_text = ssm_text + " --output=\"ssm_" + outfile + "\""
				esm_text = esm_text + " --output=\"esm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
			f.write(sm_text + "\n")
			f.write(ssm_text + "\n")
			f.write(esm_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)

	if (not os.path.isfile("runme-prof")):
		with open("runme-prof", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -e --stderr-file=simerr -d m5out/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod 755 runme-prof", stdout=subprocess.PIPE, shell=True)

# Create a makefile for array management on SPM
def create_makefile_smmarray(arguments="", infile = "", outfile="", arraysize = 256):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
OPT_OBJECTS =  dma.bc ${opt_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	#objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

evm: $(OPT_OBJECTS)
	llvm-link -o $@_basic_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMEVM.so -smmevm --debug-only=smmevm < $@_basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis


dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include $(CFLAGS) $< -o $@

opt_%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png


cfg:
	opt -O3 -disable-inlining -dot-cfg-only < basic_$(PROGRAM).bc
	dot -Tpng cfg.main.dot -o cfg.main.png
	opt -O3 -disable-inlining -dot-cfg-only < evm_$(PROGRAM).bc
	dot -Tpng cfg.main.dot -o cfg.evm_main.png

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} evm_$(PROGRAM) 
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
#					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					  	outFile.write(line + "\n  _spm_array_begin = .;\n  . = . + 0x100000;\n  _spm_array_end = .;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
		opt_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
			opt_objects = opt_objects + "opt_" + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${opt_objects}", opt_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			makefile = makefile.replace("${outfile}", outfile + " evm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			makefile = makefile.replace("${array_size}", str(arraysize))
			f.write(makefile)

def create_runme_smmarray(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			evm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmgm $SIMDIR/configs/example/se.py --cpu-type=atomic -c evm_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				evm_text = evm_text + " -o \"" + arguments.replace("output", "evm_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				evm_text = evm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				evm_text = evm_text + " --output=\"evm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
			f.write(evm_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)


# Create a makefile for SMM global array management
def create_makefile_smmglobal(arguments="", infile = "", outfile="", globalsize = 256):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
OPT_OBJECTS = dma.bc ${opt_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	#llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	#objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

gm: $(OPT_OBJECTS)
	llvm-link -o $@_basic_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMGM.so -smmgm --debug-only=smmgm < $@_basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis


dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include $(CFLAGS) $< -o $@

opt_%.bc: %${source_file_extension}
	$(CC) -I$(SMMDIR)/stack/include -include stack_manager.h $(CFLAGS) $< -o $@

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png


cfg:
	opt -O3 -disable-inlining -dot-cfg-only < basic_$(PROGRAM).bc
	dot -Tpng cfg.main.dot -o cfg.main.png

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} gm_$(PROGRAM) 
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
#					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					  	outFile.write(line + "\n  _spm_global_begin = .;\n  . = . + 0x100000;\n  _spm_global_end = .;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
		opt_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
			opt_objects = opt_objects + "opt_" + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${opt_objects}", opt_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			makefile = makefile.replace("${outfile}", outfile + " gm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			makefile = makefile.replace("${global_size}", str(globalsize))
			f.write(makefile)

def create_runme_smmglobal(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			gm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmgm $SIMDIR/configs/example/se.py --cpu-type=atomic -c gm_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				gm_text = gm_text + " -o \"" + arguments.replace("output", "gm_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				gm_text = gm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				gm_text = gm_text + " --output=\"gm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
			f.write(gm_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)

# Create a makefile for SMM code management
def create_makefile_smmcode(arguments="", infile = "", outfile="", codesize = 0, numregions = 0):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o temp_$@.bc $(OBJECTS)
	opt $(OPTLVL) -disable-inlining < temp_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc $(OPTLVL) -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	#objdump -d $@ > $@.dis
	rm temp_$@.bc


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

basic_$(PROGRAM).bc: dma.bc code_manager.bc $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMH.so -smmbasic < $(PROGRAM).bc > temp_$(PROGRAM).bc
	llvm-link -o basic_$(PROGRAM).bc dma.bc code_manager.bc temp_$(PROGRAM).bc
	llvm-dis < basic_$(PROGRAM).bc > basic_$(PROGRAM).ll

cm-profile: $(PROGRAM)
	# Get user functions names
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -smmcmh-funcinfo < $(PROGRAM).bc > /dev/null 2> user_funcs.txt
	# Get user functions code sizes
	codeSize user_funcs.txt 2> func_size.txt
	-rm user_funcs.txt

mapping.txt: $(PROGRAM) cm-profile
	# Get code overlay scheme
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -smmcmh-overlay -if-func-size func_size.txt -of-size-regions size_regions.txt ${code_size} ${num_regions} < $(PROGRAM).bc > /dev/null 2> mapping.txt
	# Get the linker script based on overlay scheme
	smmmake --configure-code-linkerscript mapping.txt

cm: basic_$(PROGRAM).bc mapping.txt
	# Insert code management functions
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCM.so -smmcm -overlaying mapping.txt --debug-only=smmcm < basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

ecm: basic_$(PROGRAM).bc mapping.txt
	# Insert code management functions based on code overlay scheme
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMECM.so -smmecm -overlaying mapping.txt --debug-only=smmecm < basic_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include -include dma.h $(CFLAGS) $< -o $@

code_manager.bc:$(SMMDIR)/code/lib/code_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/code/include -include code_manager.h $(CFLAGS) $< -o $@

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

callgraph:
	opt -dot-callgraph < $(PROGRAM).bc
	dot -Tpng callgraph.dot -o $(PROGRAM).png
	opt -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} cm_$(PROGRAM) ecm_$(PROGRAM) func_size.txt size_regions.txt mapping.txt
    """


	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			if (outfile == ""):
				makefile = makefile.replace("${outfile}", "")
			else:
				makefile = makefile.replace("${outfile}", outfile + " cm_" + outfile + " ecm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			if (codesize != 0):
				makefile = makefile.replace("${code_size}", "-code-size " + str(codesize))
			else:
				makefile = makefile.replace("${code_size}", "")
			if (numregions != 0):
				makefile = makefile.replace("${num_regions}", "-num-regions " + str(numregions))
			else:
				makefile = makefile.replace("${num_regions}", "")
			f.write(makefile)


# Create a makefile for SMM code management
def create_linkerscript_smmcode(overlaying):
	# Create the overlay of sections in the linker script from mapping file
	overlay_script = []
	overlays = dict()
	with open(overlaying) as f:
		temp = f.readline()
    		print temp
		#numSec = int(f.readline())
		numSec = int(temp)
		for i in range(numSec):
			overlays[i] = {"functions": []}

		for line in f:
			line = line.strip()
    			if line == "":
				continue;
 			tokens = line.split(" ")
   			func = tokens[0]
   			sec = int(tokens[1])
			#print func, " ", sec
   			overlays[sec]['functions'].append(func)

	last_func = ""
	overlay_script.append("\n\n  . = _spm_code_begin;\n")
	for i in range(len(overlays)):
		overlay = overlays[i]
		if i == 0:
			overlay_script.append("  OVERLAY ALIGN(0x10) : AT (_spm_code_end) {\n")
		else:
			overlay_script.append("  OVERLAY ALIGN(0x10) : {\n")
		for func in overlay["functions"]:
			last_func = func
			overlay_script.append("  .%s { *.(%s) }\n" % (func, func))
		overlay_script.append("  }\n")
	overlay_script.append("  . = LOADADDR(.%s) + SIZEOF(.%s);\n" % (last_func, last_func));
	overlay_script.append("  _realign_addr = ALIGN(0x10);\n");
	overlay_script.append("  .realign _realign_addr : AT (_realign_addr) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n\n");
	#print overlay_script

	# Create the linker script with SPM
#	if (not os.path.isfile("spm.ld")): 
	with open('spm.ld', 'w') as linker_script:
		implicit_linker_script = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
		i = 0
		while i <  range(len(implicit_linker_script)):
	    		line = implicit_linker_script[i]
    			while (line.find("==================================================") == -1):
				i = i+1
				line = implicit_linker_script[i]
			i = i + 1
    			line = implicit_linker_script[i]
			while (line.find("==================================================") == -1):
				if line.find("executable_start") != -1:
#					linker_script.write(line.replace("0x400000", "0x000000") + "\n  .spm_begin : { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n  . = ALIGN(0x10);\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					linker_script.write(line + "\n  . = ALIGN(0x10);\n  _spm_code_begin = .;\n  . = . + 0x100000;\n  _spm_code_end = .;\n")
					linker_script.writelines(overlay_script)
				else:
    					linker_script.write(line + "\n")
				i = i+1
				line = implicit_linker_script[i]
			break;


# Create runme file for a SMM architecture
def create_runme_smmcode(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			cm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmcm $SIMDIR/configs/example/se.py --cpu-type=atomic -c cm_" + program
			ecm_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmecm $SIMDIR/configs/example/se.py --cpu-type=atomic -c ecm_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				cm_text = cm_text + " -o \"" + arguments.replace("output", "cm_output", 1) + "\""
				ecm_text = ecm_text + " -o \"" + arguments.replace("output", "ecm_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				cm_text = cm_text + " --input=\"" + infile + "\""
				ecm_text = ecm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				cm_text = cm_text + " --output=\"cm_" + outfile + "\""
				ecm_text = ecm_text + " --output=\"ecm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
			f.write(cm_text + "\n")
			f.write(ecm_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)



# Create a makefile for SMM application management
def create_makefile_smmapp(arguments="", infile = "", outfile="", codesize = 0, stacksize = 0, numregions = 0):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMDIR=$(HOME)/Documents/smm

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o temp_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < temp_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	objdump -d $@ > $@.dis
	rm temp_$@.bc

basic_$(PROGRAM).bc: dma.bc stack_manager.bc code_manager.bc $(PROGRAM)
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMH.so -smmbasic < $(PROGRAM).bc > temp_$(PROGRAM).bc
	llvm-link -o basic_$(PROGRAM).bc dma.bc stack_manager.bc code_manager.bc temp_$(PROGRAM).bc
	llvm-dis < basic_$(PROGRAM).bc > basic_$(PROGRAM).ll


cm-profile: $(PROGRAM)
	# Get user functions names
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -smmcmh-funcinfo --debug-only=smmcm-funcinfo < $(PROGRAM).bc > /dev/null 2> user_funcs.txt
	# Get user functions code sizes
	codeSize user_funcs.txt 2> func_size.txt
	-rm user_funcs.txt

mapping.txt: $(PROGRAM) cm-profile
	# Get code overlay scheme
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -smmcmh-overlay -if-func-size func_size.txt ${code_size} ${num_regions} < $(PROGRAM).bc > /dev/null 2> mapping.txt
	# Get the linker script based on overlay scheme
	smmmake --configure-app-linkerscript mapping.txt

am: basic_$(PROGRAM).bc mapping.txt
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSM.so -smmsm --debug-only=smmsm < basic_$(PROGRAM).bc > temp_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCM.so -smmcm -overlaying mapping.txt --debug-only=smmcm < temp_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	-rm temp_$(PROGRAM).bc

esm-wcg_cuts.txt:
	ssdm-cuts esm-wcg/wcg_paths.txt ${stack_size} > esm-wcg_cuts.txt

eam: basic_$(PROGRAM).bc esm-wcg_cuts.txt mapping.txt
	#opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMEVM.so -smmevm < basic_$(PROGRAM).bc > temp1_$(PROGRAM).bc
	#opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMESM.so -smmesm -call-stack-partition esm-wcg_cuts.txt < temp1_$(PROGRAM).bc > temp2_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMESM.so -smmesm -call-stack-partition esm-wcg_cuts.txt < basic_$(PROGRAM).bc > temp2_$(PROGRAM).bc
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMECM.so -smmecm -overlaying mapping.txt < temp2_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	#objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis
	rm temp*_$(PROGRAM).bc

esm-profile: $(PROGRAM)
	# The trace of function calls in Gem5 must have ben prepared

	# Print the stack frame sizes of user-defined functions into wcg_nodes.txt 
	~/Applications/llvm-3.6.0/build/Debug+Asserts/bin/clang -o $(PROGRAM) $(PROGRAM).bc $(LDFLAGS) 2> wcg_nodes.txt

	# Print the names of the library functions into lib_funcs.txt
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-libfunc < $(PROGRAM).bc > /dev/null 2> lib_funcs.txt
	# Get the stack frame sizes of the library functions listed in lib_funcs.txt and add them to wcg_nodes.txt
	libFuncFrameSize lib_funcs.txt wcg_nodes.txt

	# Get the call paths and save the result in wcg_paths.txt, based on wcg_nodes.txt
	opt -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMSSM.so -smmsm-wcg < $(PROGRAM).bc > /dev/null 2> wcg_paths.txt 

	-rm -rf esm-wcg
	mkdir esm-wcg
	mv wcg_nodes.txt wcg_paths.txt esm-wcg
	-rm lib_funcs.txt

dma.bc:$(SMMDIR)/common/lib/dma.c
	$(CC) -I$(SMMDIR)/common/include -include dma.h $(CFLAGS) $< -o $@

stack_manager.bc:$(SMMDIR)/stack/lib/stack_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/stack/include -include stack_manager.h $(CFLAGS) $< -o $@

code_manager.bc:$(SMMDIR)/code/lib/code_manager.c
	$(CC) -I$(SMMDIR)/common/include -I$(SMMDIR)/code/include -include code_manager.h $(CFLAGS) $< -o $@

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@
clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} am_$(PROGRAM) eam_$(PROGRAM) esm-wcg_cuts.txt func_size.txt mapping.txt
    """


	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			if (outfile == ""):
				makefile = makefile.replace("${outfile}", "")
			else:
				makefile = makefile.replace("${outfile}", outfile + " am_" + outfile + " eam_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			if (stacksize != 0):
				makefile = makefile.replace("${stack_size}", str(stacksize))
			else:
				makefile = makefile.replace("${stack_size}", "")
			if (codesize != 0):
				makefile = makefile.replace("${code_size}", "-code-size " + str(codesize))
			else:
				makefile = makefile.replace("${code_size}", "")
			if (numregions != 0):
				makefile = makefile.replace("${num_regions}", "-num-regions " + str(numregions))
			else:
				makefile = makefile.replace("${num_regions}", "")
			f.write(makefile)


# Create a makefile for SMM applicatoin management
def create_linkerscript_smmapp(overlaying):
	# Create the overlay of sections in the linker script from mapping file
	overlay_script = []
	overlays = dict()
	#print(overlaying)
	with open(overlaying) as f:
		numSec = int(f.readline())
		for i in range(numSec):
			overlays[i] = {"functions": []}

		for line in f:
			line = line.strip()
    			if line == "":
				continue;
 			tokens = line.split(" ")
   			func = tokens[0]
   			sec = int(tokens[1])
			#print func, " ", sec
   			overlays[sec]['functions'].append(func)

	last_func = ""


	overlay_script.append("\n\n  . = _spm_code_begin;\n")
	for i in range(len(overlays)):
		overlay = overlays[i]
		if i == 0:
			overlay_script.append("  OVERLAY ALIGN(0x10) : AT (_spm_code_end) {\n")
		else:
			overlay_script.append("  OVERLAY ALIGN(0x10) : {\n")
		for func in overlay["functions"]:
			last_func = func
			overlay_script.append("  .%s { *.(%s) }\n" % (func, func))
		overlay_script.append("  }\n")
	overlay_script.append("  . = LOADADDR(.%s) + SIZEOF(.%s);\n" % (last_func, last_func));
	overlay_script.append("  _realign_addr = ALIGN(0x10);\n");
	overlay_script.append("  .realign _realign_addr : AT (_realign_addr) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n\n");

	overlay_script.append("  _spm_stack_begin = .;\n");
	overlay_script.append("  . = . + 0x100000;\n");
	overlay_script.append("  _spm_stack_end = .;\n\n");


	overlay_script.append("  _spm_array_begin = .;\n");
	overlay_script.append("  . = . + 0x100000;\n");
	overlay_script.append("  _spm_array_end = .;\n\n");






	#print overlay_script

	# Create the linker script with SPM
#	if (not os.path.isfile("spm.ld")): 
	with open('spm.ld', 'w') as linker_script:
		implicit_linker_script = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
		i = 0
		while i <  range(len(implicit_linker_script)):
	    		line = implicit_linker_script[i]
    			while (line.find("==================================================") == -1):
				i = i+1
				line = implicit_linker_script[i]
			i = i + 1
    			line = implicit_linker_script[i]
			while (line.find("==================================================") == -1):
				if line.find("executable_start") != -1:
#					linker_script.write(line.replace("0x400000", "0x000000") + "\n  .spm_begin : { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n  . = ALIGN(0x10);\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					linker_script.write(line + "\n  . = ALIGN(0x10);\n  _spm_code_begin = .;\n  . = . + 0x100000;\n  _spm_code_end = .;\n")
					linker_script.writelines(overlay_script)
				else:
    					linker_script.write(line + "\n")
				i = i+1
				line = implicit_linker_script[i]
			break;


# Create runme file for a SMM architecture
def create_runme_smmapp(arguments="", infile = "", outfile="", l1d_size = 0, l1i_size = 0):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			am_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmam $SIMDIR/configs/example/se.py --cpu-type=atomic -c am_" + program
			eam_text = "$SIMDIR/build/X86/gem5.opt -q -r -d m5out/spm/smmeam $SIMDIR/configs/example/se.py --cpu-type=atomic -c eam_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				am_text = am_text + " -o \"" + arguments.replace("output", "am_output", 1) + "\""
				eam_text = eam_text + " -o \"" + arguments.replace("output", "eam_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				am_text = am_text + " --input=\"" + infile + "\""
				eam_text = eam_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				am_text = am_text + " --output=\"am_" + outfile + "\""
				eam_text = eam_text + " --output=\"eam_" + outfile + "\""
			f.write(prolog + "\n")
			#f.write(text + "\n")
			#f.write(am_text + "\n")
			if l1d_size  or l1i_size:
				eam_text = eam_text + " --caches"
				if l1d_size:
					eam_text = eam_text + " --l1d_size " + str(l1d_size)
				if l1i_size:
					eam_text = eam_text + " --l1i_size " + str(l1i_size)
			f.write(eam_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)

	if (not os.path.isfile("runme-prof")):
		with open("runme-prof", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.opt -q -r -e --stderr-file=simerr -d m5out/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod 755 runme-prof", stdout=subprocess.PIPE, shell=True)


# Create a makefile for a cache-based architecture
def create_makefile_cache(outfile=""):
	#  Makefile
	makefile = """
PROGRAM = ${program}

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm
OPTLVL = -O3

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) $(OPTLVL) -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o $@.bc $(OBJECTS)
	#opt $(OPTLVL) -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/LLVMTest.so -test-cg < $@.bc > 
	#llvm-dis < $@.bc > $@.ll
	$(CC) -o $@ $(CFLAGS) $@.bc $(LDFLAGS)
	#objdump -d $@ > $@.dis

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) -emit-llvm -c $< -o $@

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png

clean:
	-rm -rf  $(PROGRAM) *.s *.o *.bc *.ll *.dis  ${outfile} *.png
    """
	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + " " + objects[i] + ".bc"
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			makefile = makefile.replace("${outfile}", outfile)
			f.write(makefile)


# Create a makefile for using hardware caching
def create_makefile_icache(arguments="", infile = "", outfile=""):
	#  make file
	makefile = """
PROGRAM = ${program}

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
#	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm-3.6.0/build/Debug+Asserts/lib/SMMCMH.so -smmcmh-cache --debug-only=smmcmh < basic_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tpng callgraph.dot -o basic_$(PROGRAM).png

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.png ${outfile} 
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  . = ALIGN(0x10); \n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n  . = _spm_begin; \n  .spm           : { *(.spm) }\n  . = _spm_end;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			makefile = makefile.replace("${outfile}", outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			f.write(makefile)

def create_runme_cache(dsize = "", isize = "", arguments="", infile="", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme script
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5-cache"
			text = "$SIMDIR/build/X86/gem5.opt -r -d m5out/cache $SIMDIR/configs/example/se.py  --cpu-type=atomic --caches -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile != ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			if (dsize != ""):
				text = text + " --l1d_size=\"" + dsize +"\""
			if (isize != ""):
				text = text + " --l1i_size=\"" + isize +"\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)

		

# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["help", "configure-cache", "configure-icache", "configure-stack", "configure-array", "configure-global", "configure-code", "configure-code-linkerscript=", "configure-app", "configure-app-linkerscript=", "stack-size=", "array-size=", "code-size=", "num-regions=", "args=", "input=", "output=", "clean", "l1d_size=", "l1i_size="]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	arguments = ""
	infile = ""
	outfile = ""
	config = 0
	stacksize = 0
	arraysize = 0
	globalsize = 0
	codesize = 0
	numregions = 0
	overlaying = ""
	dsize = ""
	isize = ""
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print 'smmmake --configure-cache --configure-icache --configure-stack --configure-array --configure-global --configure-code --configure-code-linkerscript --configure-app --configure-app-linkerscript --stack-size --array-size --global-size --code-size --num-regions --args --input --output --clean --l1d_size --l1i_size'
			sys.exit()
		elif opt in ("--configure-cache"):
			config = 1
		elif opt in ("--configure-icache"):
			config = 2
		elif opt in ("--configure-stack"):
			config = 3
		elif opt in ("--configure-array"):
			config = 4
		elif opt in ("--configure-global"):
			config = 5
		elif opt in ("--configure-code"):
			config = 6
		elif opt in ("--configure-code-linkerscript"):
			config = 7
			overlaying = arg
		elif opt in ("--configure-app"):
			config = 8
		elif opt in ("--configure-app-linkerscript"):
			config = 9
			overlaying = arg
		elif opt in ("--args"):
			arguments = arg
		elif opt in ("--input"):
			infile = arg
		elif opt in ("--output"):
			outfile = arg
		elif opt in("--stack-size"):
			stacksize = arg
		elif opt in("--array-size"):
			arraysize = arg
		elif opt in("--global-size"):
			globalsize = arg
		elif opt in("--code-size"):
			codesize = arg
		elif opt in("--num-regions"):
			numregions = arg
		elif opt in ("--clean"):
			if (os.path.isfile("spm.ld")):
    				subprocess.Popen("rm spm.ld", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("Makefile")):
    				subprocess.Popen("rm Makefile", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("runme")):
    				subprocess.Popen("rm runme", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("runme-prof")):
    				subprocess.Popen("rm runme-prof", stdout=subprocess.PIPE, shell=True)
#			if (os.path.isdir("m5out")):
#    				subprocess.Popen("rm -r m5out", stdout=subprocess.PIPE, shell=True)
		elif opt in ("--l1d_size"):
		      	dsize = arg
		elif opt in ("--l1i_size"):
		      	isize = arg
		else:
			assert False, "unhandled option"

	if config == 1:
		create_makefile_cache(outfile)
		create_runme_cache(dsize, isize, arguments, infile, outfile)
    	if config == 2:
		create_makefile_icache(arguments, infile, outfile)
		create_runme_cache(dsize, isize, arguments, infile, outfile)
	if config == 3:
		create_makefile_smmstack(arguments, infile, outfile, stacksize)
		create_runme_smmstack(arguments, infile, outfile)
	if config == 4:
		create_makefile_smmarray(arguments, infile, outfile, arraysize)
		create_runme_smmarray(arguments, infile, outfile)
	if config == 5:
		create_makefile_smmglobal(arguments, infile, outfile, globalsize)
		create_runme_smmglobal(arguments, infile, outfile)
    	if config == 6:
		create_makefile_smmcode(arguments, infile, outfile, codesize, numregions)
		create_runme_smmcode(arguments, infile, outfile)
    	if config == 7:
		create_linkerscript_smmcode(overlaying)
    	if config == 8:
		create_makefile_smmapp(arguments, infile, outfile, codesize, stacksize, numregions)
		create_runme_smmapp(arguments, infile, outfile, dsize, isize)
    	if config == 9:
		create_linkerscript_smmapp(overlaying)

