#! /usr/bin/env python

import getopt
import os
import subprocess
import sys


# Create a makefile for SMM code management
def create_smm_code_makefile(arguments="", infile = "", outfile="", spmsize = 256, mapping=""):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMLIB=$(HOME)/Documents/smm/code/lib

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
OPT_OBJECTS = code_manager.bc ${opt_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

cm: $(OPT_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSMMCM.so -smmcm --debug-only=smmcm < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

code_manager.bc:$(SMMLIB)/code_manager.c
	$(CC) -I$(SMMLIB) -include code_manager.h $(CFLAGS) $< -o $@

opt_%.bc: %${source_file_extension}
	$(CC) -I$(SMMLIB) -include code_manager.h $(CFLAGS) $< -o $@

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tps callgraph.dot -o basic_$(PROGRAM).ps

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.ps ${outfile} cm_$(PROGRAM) 
    """


	# Create the overlay of sections in the linker script from mapping file
	overlay_script = []
    	if mapping != "":
		overlays = dict()
		with open(mapping) as f:
			numSec = int(f.readline())
			for i in range(numSec):
				overlays[i] = {"functions": []}

			for line in f:
				line = line.strip()
    				if line == "":
					continue;
 				tokens = line.split(" ")
   				func = tokens[0]
   				sec = int(tokens[1])
				#print func, " ", sec
   				overlays[sec]['functions'].append(func)

		last_func = ""
		overlay_script.append("\n  . = _spm_begin;\n")
		for i in range(len(overlays)):
			overlay = overlays[i]
			if i == 0:
				overlay_script.append("  OVERLAY ALIGN(0x10) : AT (_spm_end) {\n")
			else:
				overlay_script.append("  OVERLAY ALIGN(0x10) : {\n")
			for func in overlay["functions"]:
				last_func = func
				overlay_script.append("  .%s { *.(%s) }\n" % (func, func))
			overlay_script.append("  }\n")
		overlay_script.append("  . = LOADADDR(.%s) + SIZEOF(.%s);\n" % (last_func, last_func));
		overlay_script.append("  _realign_addr = ALIGN(0x10);\n");
		overlay_script.append("  .realign _realign_addr : AT (_realign_addr) { FILL(0x0) QUAD(0x0) QUAD(0x0) }\n\n");

	# Create the linker script with SPM
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as linker_script:
			implicit_linker_script = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(implicit_linker_script)):
		    		line = implicit_linker_script[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = implicit_linker_script[i]
				i = i + 1
    				line = implicit_linker_script[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
					  	linker_script.write(line.replace("0x400000", "0x000000") + "\n  . = ALIGN(0x10);\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
						linker_script.writelines(overlay_script)
					else:
    						linker_script.write(line + "\n")
					i = i+1
					line = implicit_linker_script[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
		opt_objects = ""
#		prof_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
			opt_objects = opt_objects + "opt_" + objects[i] + ".bc" + " "
#			prof_objects = prof_objects + "prof_" + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${opt_objects}", opt_objects)
#			makefile = makefile.replace("${prof_objects}", prof_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			if (outfile == ""):
				makefile = makefile.replace("${outfile}", "")
			else:
				makefile = makefile.replace("${outfile}", outfile + " cm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			makefile = makefile.replace("${spm_size}", str(spmsize))
			f.write(makefile)



# Create a makefile for SMM stack management
def create_smm_stack_makefile(arguments="", infile = "", outfile="", spmsize = 256):
	#  make file
	makefile = """
PROGRAM = ${program}

SMMLIB=$(HOME)/Documents/smm/stack/lib

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
OPT_OBJECTS = stack_manager.bc ${opt_objects}
PROF_OBJECTS = stack_management_helper.bc ${prof_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS)
	objdump -d $@ > $@.dis


%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

ssm: $(OPT_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSSM.so -smmssm --debug-only=smmssm < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

esm: $(OPT_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMESM.so -smmesm --debug-only=smmesm < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).bc 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

stack_manager.bc:$(SMMLIB)/stack_manager.c
	$(CC) -I$(SMMLIB) $(CFLAGS) $< -o $@

opt_%.bc: %${source_file_extension}
	$(CC) -I$(SMMLIB) -include stack_manager.h $(CFLAGS) $< -o $@

ssm-prof: $(PROF_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(PROF_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSSM.so -smmsmh < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).ll 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS)
	./$@_$(PROGRAM) ${arguments} ${infile} > /dev/null
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSSM.so -smmsmh < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	mkdir ssm-wcg
	mv wcg_nodes.txt wcg_paths.txt ssm-wcg
    	
ssm-cuts:
	ssdm-cuts ssm-wcg/wcg_paths.txt ${spm_size} > wcg_cuts.txt

esm-prof: $(PROF_OBJECTS)
    	# Get the trace of function calls
	./runmeonce
    	# Print the stack frame sizes of the user functions into wcg_nodes.txt and print the names of the library functions into lib_funcs.txt
	llvm-link -o $@_raw_$(PROGRAM).bc $(PROF_OBJECTS)
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSSM.so -smmsmh < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).ll 
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS)
	./$@_$(PROGRAM) ${arguments} ${infile} > /dev/null
	# Get the stack frame sizes of the library functions listed in lib_funcs.txt and add them to wcg_nodes.txt
	smmstack-libfunc
	# Get the call paths and save the result in wcg_paths.txt, based on wcg_nodes.txt
	opt -O3 -disable-inlining -load $(HOME)/Applications/llvm/build/Debug+Asserts/lib/LLVMSSM.so -smmsmh < $@_raw_$(PROGRAM).bc > $@_$(PROGRAM).bc
	mkdir esm-wcg
	mv wcg_nodes.txt wcg_paths.txt esm-wcg
	
esm-cuts:
	ssdm-cuts esm-wcg/wcg_paths.txt ${spm_size} > wcg_cuts.txt

stack_management_helper.bc:$(SMMLIB)/stack_management_helper.c
	$(CC) -I$(SMMLIB) -include stack_management_helper.h $(CFLAGS) $< -o $@

prof_%.bc: %${source_file_extension}
	$(CC) -I$(SMMLIB) -include stack_management_helper.h $(CFLAGS) $< -o $@

opt:
	make ssm-cuts
	make ssm
	make esm-cuts
	make esm

callgraph:
	opt -O3 -disable-inlining -dot-callgraph < basic_$(PROGRAM).bc
	dot -Tps callgraph.dot -o basic_$(PROGRAM).ps

clean:
	-rm -rf  $(PROGRAM) *.bc *.ll *.s *.dis *.dot *.ps ${outfile} ssm_$(PROGRAM) esm_$(PROGRAM) ssm-prof_$(PROGRAM) esm-prof_$(PROGRAM) wcg_cuts.txt lib_funcs.txt
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
		opt_objects = ""
		prof_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
			opt_objects = opt_objects + "opt_" + objects[i] + ".bc" + " "
			prof_objects = prof_objects + "prof_" + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${opt_objects}", opt_objects)
			makefile = makefile.replace("${prof_objects}", prof_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			makefile = makefile.replace("${outfile}", outfile + " ssm_" + outfile + " esm_" + outfile)
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			makefile = makefile.replace("${spm_size}", str(spmsize))
			f.write(makefile)



# Create a makefile for SMM global management
def create_smm_global_makefile(arguments="", infile = "", outfile=""):
	#  make file
	makefile = """
PROGRAM = ${program}
WORK=$(HOME)
SMMLIB=$(WORK)/Documents/smm/global/lib

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
OPT_OBJECTS = dma.bc ${opt_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline -fno-vectorize -fno-unroll-loops
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o $@.bc $(OBJECTS)
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc 
	$(CC) -o $@ $@.s $(LDFLAGS) 
	objdump -d $@ > $@.dis

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

gm: $(OPT_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -load $(WORK)/Applications/llvm/build/Debug+Asserts/lib/LLVMGM.so -smmgm -debug-only=smmgm < $@_raw_$(PROGRAM).bc > $@_prep_$(PROGRAM).bc
	opt -O3 --disable-loop-vectorization  -disable-loop-unrolling < $@_prep_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).ll
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

egm: $(OPT_OBJECTS)
	llvm-link -o $@_raw_$(PROGRAM).bc $(OPT_OBJECTS)
	opt -load $(WORK)/Applications/llvm/build/Debug+Asserts/lib/LLVMEGM.so -smmegm -debug-only=smmegm < $@_raw_$(PROGRAM).bc > $@_prep_$(PROGRAM).bc
	opt -O3 --disable-loop-vectorization  -disable-loop-unrolling < $@_prep_$(PROGRAM).bc > $@_$(PROGRAM).bc
	llvm-dis < $@_$(PROGRAM).bc > $@_$(PROGRAM).ll
	llc -O3 -o $@_$(PROGRAM).s $@_$(PROGRAM).ll
	$(CC) -o $@_$(PROGRAM) $@_$(PROGRAM).s $(LDFLAGS) -Wl,-T,spm.ld
	objdump -d $@_$(PROGRAM) > $@_$(PROGRAM).dis

dma.bc:$(SMMLIB)/dma.c 
	$(CC) $(CFLAGS) $< -o $@ 

opt_%.bc: %${source_file_extension} 
	$(CC) -I$(SMMLIB) -include dma.h $(CFLAGS) $< -o $@ 

opt:
	make gm 
	make egm 

cfg:
	opt -dot-cfg-only $(PROGRAM).bc
	dot -Tpng cfg.foo.dot -o cfg.foo.png
	opt -dot-cfg-only egm_$(PROGRAM).bc
	dot -Tpng cfg.foo.dot -o cfg.egm_foo.png


clean:
	-rm -rf $(PROGRAM) gm_$(PROGRAM) egm_$(PROGRAM) *.bc *.ll *.s *.dis ${outfile} *.dot *.png
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_global_base = .;\n  . = . + 0x100000;\n  _local_spm_global_base = _spm_global_base;\n  _remote_spm_global_base = _local_spm_global_base + 0x10000;\n  _buffer_base = _remote_spm_global_base + 0x30000;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
		opt_objects = ""
		prof_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + objects[i] + ".bc" + " "
			opt_objects = opt_objects + "opt_" + objects[i] + ".bc" + " "
			prof_objects = prof_objects + "prof_" + objects[i] + ".bc" + " "
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			# make + make opt
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${opt_objects}", opt_objects)
			makefile = makefile.replace("${prof_objects}", prof_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			# make clean
			if (outfile == ""):
				arg_list = arguments.split()
    				for i in range(len(arg_list)):
					if "output" in arg_list[i]:
						outfile = arg_list[i] 
			if (outfile != ""):
				makefile = makefile.replace("${outfile}", outfile + " gm_" +outfile + " egm_"+outfile)
			else:
				makefile = makefile.replace("${outfile}", "")
			# make prof
			makefile = makefile.replace("${arguments}", arguments)
			if (infile != ""):
				makefile = makefile.replace("${infile}", "< " + infile)
			else:
				makefile = makefile.replace("${infile}", "")
			f.write(makefile)




# Create runme file for a SMM architecture
def create_smm_runme(arguments="", infile = "", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5"
			text = "$SIMDIR/build/X86/gem5.debug -q -r -d m5out/smm $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + program
			cm_text = "$SIMDIR/build/X86/gem5.debug -q -r -d m5out/smmcm $SIMDIR/configs/example/se.py --cpu-type=atomic -c cm_" + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				cm_text = cm_text + " -o \"" + arguments.replace("output", "cm_output", 1) + "\""
			if (infile!= ""):
				text = text + " --input=\"" + infile + "\""
				cm_text = cm_text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
				cm_text = cm_text + " --output=\"cm_" + outfile + "\""
			f.write(prolog + "\n")
			f.write(text + "\n")
			f.write(cm_text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)

# Create a makefile for a cache-based architecture
def create_cache_makefile(outfile=""):
	#  Makefile
	makefile = """
PROGRAM = ${program}

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${original_objects}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -emit-llvm -c -O3 -fno-inline
LDFLAGS = $(LIBDIRS) $(LIBS) -static

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o basic_$@.bc $(OBJECTS)
	opt -O3 -disable-inlining < basic_$@.bc > $@.bc
	llvm-dis < $@.bc > $@.ll
	llc -O3 -o $@.s $@.bc
	$(CC) -o $@ $@.s $(LDFLAGS)
	objdump -d $@ > $@.dis

%.bc: %${source_file_extension}
	$(CC) $(CFLAGS) $< -o $@

clean:
	-rm -rf  $(PROGRAM) *.s *.o *.bc *.ll *.dis ${outfile}
    """
	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		source_file_extension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if source_file_extension == "":
					source_file_extension = extension
		objects = list(set(objects))
		original_objects = ""
	   	for i in range(len(objects)):
			original_objects = original_objects + " " + objects[i] + ".bc"
		# Use the name of current folder as the name of generated executable file
		program = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			makefile = makefile.replace("${original_objects}", original_objects)
			makefile = makefile.replace("${program}", program)
			makefile = makefile.replace("${source_file_extension}", source_file_extension)
			makefile = makefile.replace("${outfile}", outfile)
			f.write(makefile)


def create_cache_runme(dsize = "", arguments="", infile="", outfile=""):
	program = os.path.basename(os.getcwd())
	# Create a runme script
	if (not os.path.isfile("runme")):
		with open("runme", "w") as f:
			prolog = "#!/bin/sh\nWORK=$HOME\nSIMDIR=$WORK/Applications/gem5_stackcache"
			text = "$SIMDIR/build/X86/gem5.debug -d m5out/cache -r $SIMDIR/configs/example/se.py --cpu-type=atomic --caches -c " + program
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (infile != ""):
				text = text + " --input=\"" + infile + "\""
			if (outfile != ""):
				text = text + " --output=\"" + outfile + "\""
			if (dsize != ""):
				text = text + " --l1d_size=\"" + dsize +"\""
			f.write(prolog + "\n")
			f.write(text + "\n")
    		subprocess.Popen("chmod 755 runme", stdout=subprocess.PIPE, shell=True)
		

# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["help", "configure-cache", "configure-code=", "configure-stack", "configure-global", "spm-size=", "args=", "input=", "output=", "clean", "l1d_size="]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	arguments = ""
	infile = ""
	outfile = ""
	config = 0
	spmsize = 256
	dsize = ""
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print 'smmmake --configure-code --configure-stack --configure-global --spm-size --configure-cache --args --input --output --clean'
			sys.exit()
		elif opt in ("--configure-cache"):
			config = 1
		elif opt in ("--configure-code"):
			mapping = arg
			config = 2
		elif opt in ("--configure-stack"):
			config = 3
		elif opt in ("--configure-global"):
			config = 4
		elif opt in ("--args"):
			arguments = arg
		elif opt in ("--input"):
			infile = arg
		elif opt in ("--output"):
			outfile = arg
		elif opt in("--spm-size"):
			spmsize = arg
		elif opt in ("--clean"):
			if (os.path.isfile("spm.ld")):
    				subprocess.Popen("rm spm.ld", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("Makefile")):
    				subprocess.Popen("rm Makefile", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("runmeonce")):
    				subprocess.Popen("rm runmeonce", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("runme")):
    				subprocess.Popen("rm runme", stdout=subprocess.PIPE, shell=True)
			if (os.path.isdir("m5out")):
    				subprocess.Popen("rm -r m5out", stdout=subprocess.PIPE, shell=True)
		elif opt in ("--l1d_size"):
		      	dsize = arg
		else:
			assert False, "unhandled option"

	if config == 1:
		create_cache_makefile(outfile)
		create_cache_runme(dsize, arguments, infile, outfile)
    	if config == 2:
		create_smm_code_makefile(arguments, infile, outfile, spmsize, mapping)
		create_smm_runme(arguments, infile, outfile)
	if config == 3:
		create_smm_stack_makefile(arguments, infile, outfile, spmsize)
		create_smm_runme(arguments, infile, outfile)
	if config == 4:
		create_smm_global_makefile(arguments, infile, outfile)
		create_smm_runme(arguments, infile, outfile)
