#! /usr/bin/env python

import math
import os
import subprocess

argv = {
    "adpcm.decode" : "--input data/small.adpcm --output output_small.pcm", 
    "adpcm.encode" : "--input data/small.pcm --output output_small.adpcm",
    "basicmath" : "--output output_small.txt",
    #"CRC32" : "--args data/small.pcm --output output_small.txt",
    "dijkstra" : "--args input.dat --output output_small.dat",
    "patricia" : "--args small.udp --output output_small.txt",
    "FFT" : "--args \"4 4096\" --output output_small.txt",
    "IFFT" : "--args \"4 8192 -i\" --output output_small.inv.txt",
    "rijndael.decode": "--args \"input_small.enc output_small.dec d 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\"",
    "rijndael.encode": "--args \"input_small.asc output_small.enc e 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\"",
    "sha": "--args \"input_small.asc\" --output output_small.txt",
    "stringsearch": "--output output_small.txt",
    #"susan.corners" : "--args \"input_small.pgm output_small.corners.pgm -c\"",
    #"susan.edges": "--args \"input_small.pgm output_small.edges.pgm -e\"",
    #"susan.smoothing": "--args \"input_small.pgm output_small.smoothing.pgm -s\"",
}

cwd = os.getcwd()
for prog, options in argv.iteritems():
	if not os.path.isdir(prog):
		print prog, "does not exist"
		continue
	print prog
	os.chdir(prog)
	#print "\t", options
    	print (os.getcwd())
	command = "smmmake --configure-code;"
	subprocess.call(command, shell=True)
	command = "make -s;"
	subprocess.call(command, shell=True)
	command = "make -s prof;"
	subprocess.call(command, shell=True)
	f = open('user_defined_func_size.txt', 'r')
	minCodeSize = 0
	midCodeSize = 0
	maxCodeSize = 0
	for line in f:
		funcName, funcSizeStr = line.split()
		funcSize = long(funcSizeStr)
		if funcSize > minCodeSize:
			minCodeSize = funcSize
		maxCodeSize += funcSize
	f.close()
	midCodeSize = (minCodeSize + maxCodeSize) / 2
	iCacheSize = long(pow(2, math.ceil(math.log(midCodeSize, 2))))


	f = open('configure-spm', 'w')
	command = "smmmake --clean; smmmake --configure-code " + options + " --num-regions 2"
	print "\t", command
	f.write(command)
	f.close()

	f = open('configure-spm-min', 'w')
	command = "smmmake --clean; smmmake --configure-code " + options + " --code-size " + str(minCodeSize)
	print "\t", command
	f.write(command)
	f.close()

	f = open('configure-spm-mid', 'w')
	command = "smmmake --clean; smmmake --configure-code " + options + " --code-size " + str(midCodeSize)
	print "\t", command
	f.write(command)
	f.close()

	f = open('configure-spm-max', 'w')
	command = "smmmake --clean; smmmake --configure-code " + options + " --code-size " + str(maxCodeSize) 
	print "\t", command
	f.write(command)
	f.close()

	f = open('configure-cache', 'w')
	command = "smmmake --clean; smmmake --configure-icache " + options + " --l1i_size " + str(iCacheSize)
	print "\t", command
	f.write(command)
	f.close()

	command = "chmod +x configure-cache; chmod +x configure-spm; chmod +x configure-spm-min; chmod +x configure-spm-mid; chmod +x configure-spm-max;"
	subprocess.call(command, shell=True)

	command = "make clean; smmmake --clean;"
	subprocess.call(command, shell=True)

    	os.chdir(cwd)
    	
