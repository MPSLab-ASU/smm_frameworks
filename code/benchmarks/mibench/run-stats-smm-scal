#! /usr/bin/env python
import os
import subprocess
import openpyxl 

def getMetric(path):
	print path
	output = subprocess.Popen("grep sim_insts "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	if len(tempList) == 0:
    		return
	numInsts = float(tempList[1])

	output = subprocess.Popen("grep num_dmacalls "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
	numDMA = float(tempList[1])
#	print numDMA

	output = subprocess.Popen("grep bytes_transferred_dma "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
	DMASize = float(tempList[1])

#	return numInsts*TPI + numDMA*startupCost + DMASize*transferTimePerByte
	return numInsts



def getStats(prog, numFuncs, ws, r):

	assert (numFuncs >= 2)

    	ws['A'+str(r)] = prog
    	ws['B'+str(r)] = 1
	for i in range(2, numFuncs+1):
	    	str_i = str(i)
	    	col = chr(ord('A')+i)
		ws[col+"1"] = str_i
		print col
		metric1 = getMetric("m5out/spm/" + str_i + "/smmcm");
		metric2 = getMetric("m5out/spm/" + str_i + "/smmecm");
		ws[col+str(r)] = float(metric2)/float(metric1)




TPI = 0.9375 # 3 cycles
startupCost = 91
transferTimePerByte = 0.075

progInput = [
    ("adpcm.decode",2), 
    ("adpcm.encode",2),
    ("basicmath",3),
    ("dijkstra",6),
    ("FFT",6),
    ("IFFT",6),
    ("rijndael.decode",4),
    ("rijndael.encode",5),
    ("sha",8),
    ("stringsearch",3)
]

cwd = os.getcwd()

wb = openpyxl.Workbook()
ws1 = wb.active
ws1.title = "scalability"
ws1['A1'] = "benchmark name"
ws1['B1'] = "1"
#ws1['A2'] = prog
r = 2
for prog,numFuncs in progInput:
	print prog
	os.chdir(prog)
	command = ""
#	print "\t", numFuncs
	getStats(prog,numFuncs,ws1,r)
#	print command
	subprocess.call(command, shell=True)
	r = r+1
    	os.chdir(cwd)

filename = "experiment-smm-scal.xlsx"
wb.save(filename)

