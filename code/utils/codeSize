#! /usr/bin/env python

from __future__ import print_function
import os, subprocess, sys

def getCodeSize(userDefinedFuncs, executable):
	sSize = 0;
	funcDict = {};
	funcSet = set();
	with open(userDefinedFuncs, 'r') as f:
		for line in f:
			funcSet.add(line.strip());

	#print executable;
	#print funcSet;

	subprocess.call("nm --print-size -n " + executable + " > temporary_nm_output.txt", shell=True);

	with open('temporary_nm_output.txt', 'r') as f:
		for line in f:
			splits = line.split(" ");
			numSplits = len(splits);
			if numSplits == 4: 
				func = splits[3].strip();
				size = int(splits[1].strip(), base=16)
				if func in funcSet:
					funcDict[func] = size;
	#print funcDict

	for key,value in funcDict.iteritems():
		print(key + " " + str(value), file=sys.stderr)

	subprocess.call("rm temporary_nm_output.txt", shell=True);

if __name__ == "__main__":
	cwd = os.getcwd()
	executable = os.path.basename(cwd)
    	assert(len(sys.argv) > 1)
   	print (sys.argv[1])
    	getCodeSize(sys.argv[1], executable)


