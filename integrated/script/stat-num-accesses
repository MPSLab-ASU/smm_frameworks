#! /usr/bin/env python
import getopt
import openpyxl 
import os
import subprocess
import sys



def getStats(prog, ws, r):
	#assert (numFuncs >= 2)
	c = ord('A')
    	ws[chr(c)+str(r)] = prog
	c = c+1


	# collect statistics of cache-based execution
	path = "m5out/cache"

	output = subprocess.Popen("grep overall_user_code_accesses "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	overallUserCodeAccesses = 0
	if output != "":
		tempList = output.split()
		overallUserCodeAccesses = float(tempList[1])
    	ws[chr(c)+str(r)] = overallUserCodeAccesses
	c = c+1

	output = subprocess.Popen("grep overall_user_stack_accesses "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	overallUserStackAccesses = 0
	if output != "":
		tempList = output.split()
		overallUserStackAccesses = float(tempList[1])
    	ws[chr(c)+str(r)] = overallUserStackAccesses
	c = c+1

	output = subprocess.Popen("grep overall_user_heap_accesses "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	overallUserHeapAccesses = 0
	if output != "":
		tempList = output.split()
		overallUserHeapAccesses = float(tempList[1])
    	ws[chr(c)+str(r)] = overallUserHeapAccesses
	c = c+1

	output = subprocess.Popen("grep overall_user_global_accesses "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	overallUserGlobalAccesses = 0
	if output != "":
		tempList = output.split()
		overallUserGlobalAccesses = float(tempList[1])
    	ws[chr(c)+str(r)] = overallUserGlobalAccesses
	c = c+1
    	ws[chr(c)+str(r)] = overallUserHeapAccesses / (overallUserCodeAccesses + overallUserStackAccesses + overallUserHeapAccesses + overallUserGlobalAccesses)
	c = c+1
    	ws[chr(c)+str(r)] = overallUserHeapAccesses / (overallUserStackAccesses + overallUserHeapAccesses + overallUserGlobalAccesses)
	c = c+1




startupCost = 291
transferTimePerByte = 0.24

progInput = [
	("adpcm.decode",2), 
	("adpcm.encode",2),
	("CRC32", 2),
	("dijkstra",6),
	("FFT",6),
	("IFFT",6),
	("patricia",5),
	("rijndael.decode",4),
	("rijndael.encode",5),
	("sha",8),
	("stringsearch",3),
	("susan.corners", 19),
	("susan.edges", 19),
	("susan.smoothing", 19),
]


# Get options
if __name__ == "__main__":

	config = 1
    	output = "number_of_accesses.xlsx"



	wb = openpyxl.Workbook()
	ws1 = wb.active
	ws1.title = "Number of Accesses"
	c = ord('A')
	ws1[chr(c) +'1'] = "benchmark"
	c = c+1
	ws1[chr(c) +'1'] = "code"
	c = c+1
	ws1[chr(c) +'1'] = "stack"
	c = c+1
	ws1[chr(c) +'1'] = "heap"
	c = c+1
	ws1[chr(c) +'1'] = "global"
	c = c+1
	ws1[chr(c) + '1'] = "percentage of heap Accesses (including code)"
	c = c+1
	ws1[chr(c) + '1'] = "percentage of heap Accesses (excluding code)"
	c = c+1

	cwd = os.getcwd()
	work_dir = os.path.dirname(cwd)  + "/experiments/mibench"
	os.chdir(work_dir)
  
	r = 2
	for prog,numFuncs in progInput:
		print prog
		os.chdir(prog)
		getStats(prog, ws1, r)
		r = r+1
	    	os.chdir(work_dir)
	os.chdir(cwd)
	wb.save(output)


