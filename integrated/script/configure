#! /usr/bin/env python

import getopt
import math
import os
import subprocess
import sys


argv = [
    	("adpcm.decode", "--input data/small.adpcm --output output_small.pcm"),
	("adpcm.encode", "--input data/small.pcm --output output_small.adpcm"),
	("basicmath", "--output output_small.txt"),
	("CRC32", "--args data/small.pcm --output output_small.txt"),
	("dijkstra", "--args input.dat --output output_small.dat"),
	("FFT", "--args \"4 4096\" --output output_small.txt"),
	("IFFT", "--args \"4 8192 -i\" --output output_small.inv.txt"),
	("patricia", "--args small.udp --output output_small.txt"),
	("rijndael.decode", "--args \"input_small.enc output_small.dec d 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\""),
	("rijndael.encode", "--args \"input_small.asc output_small.enc e 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\""),
	("sha", "--args \"input_small.asc\" --output output_small.txt"),
	("stringsearch", "--output output_small.txt"),
	("susan.corners", "--args \"input_small.pgm output_small.corners.pgm -c\""),
	("susan.edges", "--args \"input_small.pgm output_small.edges.pgm -e\""),
	("susan.smoothing", "--args \"input_small.pgm output_small.smoothing.pgm -s\""),
]

def GLB(num):
    return long(pow(2, math.floor(math.log(num, 2))))

def LGB(num):
    return long(pow(2, math.ceil(math.log(num, 2))))



def configure_integrated(isramSize, dsramSize):
	cwd = os.getcwd()
	work_dir = os.path.dirname(cwd)  + "/experiments/mibench"
	out = open(str(isramSize/1024)+'KB_' + 'sram_config.txt', 'w')
	os.chdir(work_dir)
	for pair in argv:
		prog = pair[0]
		options = pair[1]
		if not os.path.isdir(prog):
			print prog, "does not exist"
			continue
		print prog
		os.chdir(prog)
		out.write('{:20s}'.format(prog));

		command = "smmmake --configure-spm --isram-size " + str(isramSize) + " --dsram-size " + str(dsramSize) 
		subprocess.call(command, shell=True)
		command = "make im_sram_config.txt" 
		subprocess.call(command, shell=True)
    		icacheSize = 0
    		dcacheSize = 0
		dspmStackSize = 0
		dspmGlobalSize = 0
    		f = open('stack_size.txt', 'r')
		minStackSize = long(f.readline().split()[1])
 		maxStackSize = long(f.readline().split()[1])
		f.close()

		f = open('im_sram_config.txt', 'r')
    		if f.readline().strip() == "instruction cache":
			isramConfig = 0
			# disable instruction cache and use the number from caching
			#icacheSize = isramSize
			icacheSize = 0
			out.write('{:20s}'.format("inst cache"));
		else:
			isramConfig = 1
			icacheSize = 0
			out.write('{:20s}'.format("inst spm"));
		f.readline()
    		if f.readline().strip() == "data cache":
			out.write('{:20s}'.format("data cache"));
			dsramConfig = 0
			#dcacheSize = dsramSize
			# disable data cache and use the number from caching
			dcacheSize = 0
		else:
			dsramConfig = 1
			dspmSize = long(f.readline().split()[1])
			dcacheSize = long(f.readline().split()[1])
			#dcacheSize = dsramSize - dspmSize
			dspmStackSize = long(f.readline().split()[1])
			dspmGlobalSize = long(f.readline().split()[1])
			out.write('{:20s}'.format("data spm"));
			out.write("\tdcache " + str(dcacheSize))
			out.write("\tdspm " + str(dspmSize))
			out.write("\tstack " + str(dspmStackSize)  + "(" +str(maxStackSize)+")")
			out.write("\tglobal " + str(dspmGlobalSize))
		f.close()
    		command = "make clean; smmmake --clean" 
		subprocess.call(command, shell=True)
		# configure caches
		f = open('configure-cache', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-cache " + options + " --l1i_size " + str(isramSize) + "B --l1d_size " + str(dsramSize) + "B"
		f.write(command)
    		f.close()
		# configure SPM
		f = open('configure-spm', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-spm " + options + " --l1i_size " + str(icacheSize) + "B --l1d_size " + str(dcacheSize) + "B" + " --isram-size " + str(isramSize) + " --isram-config " + str(isramConfig) + " --dsram-size " + str(dsramSize) + " --dsram-config " + str(dsramConfig) + " --stack-size " + str(dspmStackSize) + " --global-size " + str(dspmGlobalSize) 

		print "\t", command
		f.write(command)
	    	f.close()
		command = "chmod +x configure-spm*; chmod +x configure-cache; make clean; smmmake --clean"
		out.write("\n")
		subprocess.call(command, shell=True)
	    	os.chdir(work_dir)
	os.chdir(cwd)
	out.close()



# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["isram-size=", "dsram-size="]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	config = "integrated"
	isramSize = 128 * 1024
	dsramSize = 128 * 1024

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print '--isram-size --dsram-size'
			sys.exit()
    		elif opt in ("--isram-size"):
			isramSize = long(arg)
    		elif opt in ("--dsram-size"):
			dsramSize = long(arg)
	if config == "integrated":
		configure_integrated(isramSize, dsramSize)
   
