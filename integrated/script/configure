#! /usr/bin/env python

import getopt
import math
import os
import subprocess
import sys


argv = {
    	"adpcm.decode":("--input data/small.adpcm --output output_small.pcm",2), 
	"adpcm.encode":("--input data/small.pcm --output output_small.adpcm", 2),
	"basicmath":("--output output_small.txt",3),
	"CRC32" : ("--args data/small.pcm --output output_small.txt",2),
	"dijkstra":("--args input.dat --output output_small.dat",6),
	"FFT":("--args \"4 4096\" --output output_small.txt", 6),
	"IFFT":("--args \"4 8192 -i\" --output output_small.inv.txt", 6),
	"patricia" : ("--args small.udp --output output_small.txt",5),
	"rijndael.decode": ("--args \"input_small.enc output_small.dec d 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\"", 4),
	"rijndael.encode": ("--args \"input_small.asc output_small.enc e 1234567890abcdeffedcba09876543211234567890abcdeffedcba0987654321\"", 5),
	"sha": ("--args \"input_small.asc\" --output output_small.txt", 8),
	"stringsearch": ("--output output_small.txt", 3),
	"susan.corners" : ("--args \"input_small.pgm output_small.corners.pgm -c\"",19),
	"susan.edges": ("--args \"input_small.pgm output_small.edges.pgm -e\"",19),
	"susan.smoothing": ("--args \"input_small.pgm output_small.smoothing.pgm -s\"",19),
}



def GLB(num):
    return long(pow(2, math.floor(math.log(num, 2))))

def LGB(num):
    return long(pow(2, math.ceil(math.log(num, 2))))

    
def configure(dsize, tile_size, stackSizeScale, codeSizeScale):
	cwd = os.getcwd()
	work_dir = os.path.dirname(cwd)  + "/experiments/mibench"
	os.chdir(work_dir)
	for prog, pair in argv.iteritems():
		if not os.path.isdir(prog):
			print prog, "does not exist"
			continue
		print prog
		os.chdir(prog)

		options = pair[0]

		# Find parameters for stack management
		f = open('esm/stack_frame_sizes.txt', 'r')
		minStackSize = 0
		maxStackSize = 0
		for line in f:
			funcName, stackFrameSizeStr = line.split()
			stackFrameSize = long(stackFrameSizeStr)
			if stackFrameSize > minStackSize:
				minStackSize = stackFrameSize
			maxStackSize += stackFrameSize
		f.close()
		spmStackSize = long(stackSizeScale * (maxStackSize - minStackSize)) + minStackSize

		# Find parameters for code management
		numFuncs = pair[1]
	    	numRegions = long(math.ceil(float(numFuncs) * codeSizeScale))
		command = "smmmake --configure-spm --num-region " + str(numRegions);
		subprocess.call(command, shell=True)
		command = "make -s;"
		subprocess.call(command, shell=True)
		command = "make -s mapping.txt;"
		subprocess.call(command, shell=True)
		f = open('spm_code_size.txt', 'r')
		spmCodeSize = long(f.readline().split()[1])


		# configure caches
		f = open('configure-cache', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-cache " + options + " --l1d_size " + str(LGB(dsize+spmStackSize)) + "B --l1i_size " + str(LGB(spmCodeSize)) + "B"
		f.write(command)
    		f.close()

    		# size of SPM space for managing any non-stack data
		spmDataSize = LGB(dsize+spmStackSize) - (dsize + spmStackSize) + LGB(spmCodeSize) - spmCodeSize

		#f = open('spm_data_size.txt', 'w')
		#f.write(str(spmDataSize));
		#f.close()

		# configure SPM
		f = open('configure-spm', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-spm " + options + " --stack-size " + str(spmStackSize) + " --data-size " + str(spmDataSize) + " --tile-size " + str(tile_size) + " --num-regions " + str(numRegions) + " --l1d_size "+str(LGB(dsize))+"B"
		print "\t", command
		f.write(command)
	    	f.close()

		command = "chmod +x configure-spm*; chmod +x configure-cache; make clean; smmmake --clean"
		subprocess.call(command, shell=True)

	    	os.chdir(work_dir)
	os.chdir(cwd)


def configure_data(dsize, tile_size):
	cwd = os.getcwd()
	work_dir = os.path.dirname(cwd)  + "/experiments/mibench"
	os.chdir(work_dir)
	for prog, pair in argv.iteritems():
		if not os.path.isdir(prog):
			print prog, "does not exist"
			continue
		print prog
		os.chdir(prog)

		options = pair[0]

		# configure caches
		f = open('configure-cache', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-cache " + options + " --l1d_size " + str(dsize+dsize) + "B"
		f.write(command)
    		f.close()

    		# size of SPM space for managing any non-stack data
		spmDataSize = dsize

		# configure SPM
		f = open('configure-spm', 'w')
		command = "#!/bin/sh\n"
		command = command + "smmmake --clean; smmmake --configure-spm " + options + " --data-size " + str(spmDataSize) + " --tile-size " + str(tile_size) + " --l1d_size "+str(LGB(dsize))+"B"
		print "\t", command
		f.write(command)
	    	f.close()

		command = "chmod +x configure-spm*; chmod +x configure-cache; make clean; smmmake --clean"
		subprocess.call(command, shell=True)

	    	os.chdir(work_dir)
	os.chdir(cwd)


# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["dcache-size=", "tile-size=", "stack-size-scale=", "code-size-scale", "data"]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	dsize = 32 * 1024
	tile_size = 128
	config = 1
	stack_size_scale = 0.5
	code_size_scale = 0.5

	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print '--dcache-size --tile_size'
			sys.exit()
    		elif opt in ("--data"):
			config = 2
		elif opt in ("--dcache-size"):
			dsize = long(arg)
		elif opt in ("--tile-size"):
			tile_size = long(arg)
    		elif opt in ("--stack-size-scale"):
			stack_size_scale = float(arg)
    		elif opt in ("--stack-size-scale"):
			code_size_scale = float(arg)
	if config == 1:
		configure(dsize, tile_size, stack_size_scale, code_size_scale)
    	elif config == 2:
    		configure_data(dsize, tile_size)
