#! /usr/bin/env python
import os
import subprocess
import openpyxl 


def getStats(prog, ws, r):

	assert (numFuncs >= 2)

    	ws['A'+str(r)] = prog

	# collect statistics of cache-based execution
	path = "m5out/cache"

	output = subprocess.Popen("grep sim_insts "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	if len(tempList) == 0:
    		return
	numInsts = float(tempList[1])
    	ws['C'+str(r)] = numInsts

	output = subprocess.Popen("grep system.cpu.dcache.overall_misses::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	numDcacheMisses = 0
	if output != "":
		tempList = output.split()
		numDcacheMisses = float(tempList[1])
    	ws['D'+str(r)] = numDcacheMisses

	output = subprocess.Popen("grep system.cpu.icache.overall_misses::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
	numIcacheMisses = 0
	if output != "":
		tempList = output.split()
		numIcacheMisses = float(tempList[1])
    	ws['E'+str(r)] = numIcacheMisses

	cacheExecTime = numInsts + (numDcacheMisses + numIcacheMisses) * startupCost
    	ws['F'+str(r)] = cacheExecTime


	# collect statistics of SPM-based execution
	path = "m5out/spm/smmevm"

	output = subprocess.Popen("grep sim_insts "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	if len(tempList) == 0:
    		return
	numInsts = float(tempList[1])
    	ws['H'+str(r)] = numInsts

	output = subprocess.Popen("grep num_dmacalls "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
	numDMAs = float(tempList[1])
    	ws['I'+str(r)] = numDMAs

	output = subprocess.Popen("grep bytes_transferred_dma "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
	DMASize = float(tempList[1])
    	ws['J'+str(r)] = DMASize


	output = subprocess.Popen("grep system.cpu.dcache.overall_misses::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	numDcacheMisses = 0
	if output != "":
		tempList = output.split()
		numDcacheMisses = float(tempList[1])
    	ws['K'+str(r)] = numDcacheMisses

	#output = subprocess.Popen("grep system.cpu.icache.overall_misses::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	#tempList = output.split()
	#numIcacheMisses = float(tempList[1])
	#ws['L'+str(r)] = numIcacheMisses


	output = subprocess.Popen("grep system.cpu.num_func_calls_sstore "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['M'+str(r)] = float(tempList[1])


	output = subprocess.Popen("grep system.cpu.num_func_calls_sload "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['N'+str(r)] = float(tempList[1])


	output = subprocess.Popen("grep system.cpu.num_func_calls_l2g "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['O'+str(r)] = float(tempList[1])

	output = subprocess.Popen("grep system.cpu.num_func_calls_g2l "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['P'+str(r)] = float(tempList[1])


	output = subprocess.Popen("grep system.cpu.num_func_calls_ptr_wr "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['Q'+str(r)] = float(tempList[1])


	output = subprocess.Popen("grep system.cpu.num_func_calls_cget "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['R'+str(r)] = float(tempList[1])


	output = subprocess.Popen("grep system.cpu.num_func_calls_ccall "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	tempList = output.split()
    	ws['S'+str(r)] = float(tempList[1])



	#numMemRead = 0
	#output = subprocess.Popen("grep system.mem_ctrls.num_reads::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	#tempList = output.split()
	#print tempList
	#if len(tempList) > 1:
		#numMemRead = float(tempList[1])


	#numMemWrite = 0
	#output = subprocess.Popen("grep system.mem_ctrls.num_writes::total "+ path +"/stats.txt", stdout=subprocess.PIPE, shell=True).communicate()[0]
	#tempList = output.split()
	#print tempList
	#if len(tempList) > 1:
		#numMemWrite = float(tempList[1])

	#spmExecTime = numInsts + numDMAs*startupCost + DMASize*transferTimePerByte + (numDcacheMisses+numIcacheMisses)*startupCost
	spmExecTime = numInsts + numDMAs*startupCost + DMASize*transferTimePerByte + (numDcacheMisses)*startupCost
    	ws['T'+str(r)] = spmExecTime


	ws['V'+str(r)] = float(spmExecTime)/float(cacheExecTime)






# By CPU cycles
#TPI = 3
startupCost = 291
transferTimePerByte = 0.24

progInput = [
    ("adpcm.decode",2), 
    ("adpcm.encode",2),
#    ("basicmath",3),
    ("CRC32", 2),
    ("dijkstra",6),
    ("FFT",6),
    ("IFFT",6),
    ("patricia",5),
    ("rijndael.decode",4),
    ("rijndael.encode",5),
    ("sha",8),
    ("stringsearch",3),
    ("susan.corners", 19),
    ("susan.edges", 19),
    ("susan.smoothing", 19),
]

cwd = os.getcwd()

wb = openpyxl.Workbook()
ws1 = wb.active
ws1.title = "SPM vs Cache"
ws1['C1'] = "cache-based statistics" 
ws1['H1'] = "spm-based statistics"

ws1['A2'] = "benchmark name"
ws1['C2'] = "#insts"
ws1['D2'] = "#dmisses"
ws1['E2'] = "#imisses"
ws1['F2'] = "time"
ws1['H2'] = "#insts"
ws1['I2'] = "#dma"
ws1['J2'] = "#bytes"
ws1['K2'] = "#dmisses"
#ws1['L2'] = "#imisses"
ws1['M2'] = "#sstore"
ws1['N2'] = "#sload"
ws1['O2'] = "#l2g"
ws1['P2'] = "#g2l"
ws1['Q2'] = "#ptr_wr"
ws1['R2'] = "#cget"
ws1['S2'] = "#ccall"
ws1['T2'] = "time"
ws1['V2'] = "normalized time"

r = 3
for prog,numFuncs in progInput:
	print prog
	os.chdir(prog)
#	command = ""
#	print "\t", numFuncs
	getStats(prog, ws1,r)
#	print command
#	subprocess.call(command, shell=True)
	r = r+1
    	os.chdir(cwd)

filename = "experiments.xlsx"
wb.save(filename)

