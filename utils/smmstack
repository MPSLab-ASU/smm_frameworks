#! /usr/bin/env python

import getopt
import os
import subprocess
import sys


# Create a makefile for a SMM architecture
def create_smm_makefile():
	#  make file
	makefile = """
PROGRAM = ${binary}

SMMDIR=/home/jcai/Documents/smmstack/lib

INCLUDEDIRS=-I$(SMMDIR)
INCLUDE=-include stack_manager.h
LIBDIRS=
LIBS = -lm

OBJECTS = stack_manager.bc ${objectsUnfold}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -O0
LDFLAGS = $(LIBDIRS) $(LIBS) -static -Wl,-T,spm.ld

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o $@.bc $(OBJECTS)
	$(CC) -o $@ $@.bc $(LDFLAGS)
	llvm-dis < $@.bc > $@.ll
	#llc -march=cpp $@.ll -o $@_ll.cpp
	objdump -d $@ > $@.dis
	opt -load /home/jcai/Applications/llvm/build/Debug+Asserts/lib/LLVMSmmStack.so -smmstack < $@.bc > opt_$@.bc
	$(CC) opt_$@.bc -o opt_$@ $(LDFLAGS) 
	llvm-dis < opt_$@.bc > opt_$@.ll
	objdump -d opt_$@ > opt_$@.dis

stack_manager.bc:$(SMMDIR)/stack_manager.c
	$(CC) -emit-llvm -c $(CFLAGS) $< -o $@

%.bc: %${sourceFileExtension}
	$(CC) -emit-llvm -c $(CFLAGS) $< -o $@

clean:
	-rm -rf  $(PROGRAM) opt_$(PROGRAM) *s. *.o *.bc *.ll *_ll.cpp *.dis *.txt m5out	
    """

	# Create the linker script for SPM setup
	if (not os.path.isfile("spm.ld")): 
		with open('spm.ld', 'w') as outFile:
			inFile = subprocess.Popen("ld --verbose", stdout=subprocess.PIPE, shell=True).communicate()[0].split("\n")
			i = 0
			while i <  range(len(inFile)):
		    		line = inFile[i]
    				while (line.find("==================================================") == -1):
					i = i+1
					line = inFile[i]
				i = i + 1
    				line = inFile[i]
				while (line.find("==================================================") == -1):
					if line.find("executable_start") != -1:
					  	outFile.write(line.replace("0x400000", "0x000000") + "\n  _spm_begin = .;\n  . = . + 0x100000;\n  _spm_end = .;\n")
					else:
    						outFile.write(line + "\n")
					i = i+1
					line = inFile[i]
				break;

	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		sourceFileExtension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if sourceFileExtension == "":
					sourceFileExtension = extension
		objects = list(set(objects))
		objectsUnfold = ""
	   	for i in range(len(objects)):
			objectsUnfold = objectsUnfold + " " + objects[i] + ".bc"
		# Use the name of current folder as the name of generated binary file
		binary = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			makefile = makefile.replace("${objectsUnfold}", objectsUnfold)
			makefile = makefile.replace("${binary}", binary)
			makefile = makefile.replace("${sourceFileExtension}", sourceFileExtension)
			f.write(makefile)

# Create runme file for a SMM architecture
def create_smm_runme(arguments="", output=""):
	binary = os.path.basename(os.getcwd())
	# Create a runme file 
	if (not os.path.isfile("runme.sh")):
		with open("runme.sh", "w") as f:
			text = "#!/bin/sh\nSIMDIR=$HOME/Applications/smm_gem5\n$SIMDIR/build/X86/gem5.debug -d m5out/smm -r $SIMDIR/configs/example/se.py --cpu-type=atomic -c " + binary
			opt_text = "$SIMDIR/build/X86/gem5.debug -d m5out/smm -r $SIMDIR/configs/example/se.py --cpu-type=atomic -c opt_" + binary
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
				opt_text = opt_text + " -o \"" + arguments + "\""
			if (output != ""):
				text = text + " --output=\"" + output + "\""
				opt_text = opt_text + " --output=\"opt_" + output + "\""
			f.write(text + "\n")
			f.write(opt_text + "\n")
    		subprocess.Popen("chmod 755 runme.sh", stdout=subprocess.PIPE, shell=True)
		


# Create a makefile for a cache-based architecture
def create_cache_makefile():
	#  Makefile
	makefile = """
PROGRAM = ${binary}

INCLUDEDIRS=
INCLUDE=
LIBDIRS=
LIBS = -lm

OBJECTS = ${objectsUnfold}
CC=clang
CFLAGS = $(INCLUDEDIRS) $(INCLUDE) -O0
LDFLAGS = $(LIBDIRS) $(LIBS) -static 

all: $(PROGRAM)

$(PROGRAM): $(OBJECTS)
	llvm-link -o $@.bc $(OBJECTS)
	$(CC) -o $@ $@.bc $(LDFLAGS)
	llvm-dis < $@.bc > $@.ll
	#llc -march=cpp $@.ll -o $@_ll.cpp
	objdump -d $@ > $@.dis

%.bc: %${sourceFileExtension}
	$(CC) -emit-llvm -c $(CFLAGS) $< -o $@

clean:
	-rm -rf  $(PROGRAM) *s. *.o *.bc *.ll *_ll.cpp *.dis *.txt m5out	
    """
	# Create the makefile using the created linker script
	if (not os.path.isfile("Makefile")): 
		cwd = os.getcwd()
		files = os.listdir(cwd)
		objects = []
		sourceFileExtension = ""
		for i in range(len(files)):
			(file, extension) = os.path.splitext(files[i])
			if(extension == ".c" or extension == ".cpp" or extension == ".cc"):
				objects.append(file)
				if sourceFileExtension == "":
					sourceFileExtension = extension
		objects = list(set(objects))
		objectsUnfold = ""
	   	for i in range(len(objects)):
			objectsUnfold = objectsUnfold + " " + objects[i] + ".bc"
		# Use the name of current folder as the name of generated binary file
		binary = os.path.basename(cwd)
		with open('Makefile', 'w') as f:
			makefile = makefile.replace("${objectsUnfold}", objectsUnfold)
			makefile = makefile.replace("${binary}", binary)
			makefile = makefile.replace("${sourceFileExtension}", sourceFileExtension)
			f.write(makefile)

def create_cache_runme(arguments="", output=""):
	binary = os.path.basename(os.getcwd())
	# Create a runme script
	if (not os.path.isfile("runme.sh")):
		with open("runme.sh", "w") as f:
			text = "#!/bin/sh\nSIMDIR=$HOME/Applications/smm_cache_gem5\n$SIMDIR/build/X86/gem5.debug -d m5out/cache -r $SIMDIR/configs/example/se.py --cpu-type=atomic --caches -c " + binary
			if (arguments != ""):
				text = text + " -o \"" + arguments + "\""
			if (output != ""):
				text = text + " --output=\"" + output + "\""
			f.write(text + "\n")
    		subprocess.Popen("chmod 755 runme.sh", stdout=subprocess.PIPE, shell=True)
		
# Get options
if __name__ == "__main__":
	try:
		opts, args = getopt.getopt(sys.argv[1:], "-h", ["help", "configure-smm", "args=", "output=", "clean", "configure-cache"]) 
	except getopt.GetoptError as err:
		print str(err)
		sys.exit(2)
	arguments = ""
	output = ""
	config = 0
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print 'smm --configure-smm --configure-cache --args --output --clean'
			sys.exit()
		elif opt in ("--configure-smm"):
			config = 1
		elif opt in ("--configure-cache"):
			config = 2
		elif opt in ("--args"):
			arguments = arg
		elif opt in ("--output"):
			output = arg
		elif opt in ("--clean"):
			if (os.path.isfile("spm.ld")):
    				subprocess.Popen("rm spm.ld", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("Makefile")):
    				subprocess.Popen("rm Makefile", stdout=subprocess.PIPE, shell=True)
			if (os.path.isfile("runme.sh")):
    				subprocess.Popen("rm runme.sh", stdout=subprocess.PIPE, shell=True)
		else:
			assert False, "unhandled option"
	if config == 1:
		create_smm_makefile()
		create_smm_runme(arguments, output)
	if config == 2:
		create_cache_makefile()
		create_cache_runme(arguments, output)
		
	    
	  	
